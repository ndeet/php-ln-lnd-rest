<?php
/**
 * LnrpcChannelConstraints
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lnd\Rest\Model;

use \ArrayAccess;
use \Lnd\Rest\ObjectSerializer;

/**
 * LnrpcChannelConstraints Class Doc Comment
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LnrpcChannelConstraints implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lnrpcChannelConstraints';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'csvDelay' => 'int',
        'chanReserveSat' => 'string',
        'dustLimitSat' => 'string',
        'maxPendingAmtMsat' => 'string',
        'minHtlcMsat' => 'string',
        'maxAcceptedHtlcs' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'csvDelay' => 'int64',
        'chanReserveSat' => 'uint64',
        'dustLimitSat' => 'uint64',
        'maxPendingAmtMsat' => 'uint64',
        'minHtlcMsat' => 'uint64',
        'maxAcceptedHtlcs' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'csvDelay' => 'csv_delay',
        'chanReserveSat' => 'chan_reserve_sat',
        'dustLimitSat' => 'dust_limit_sat',
        'maxPendingAmtMsat' => 'max_pending_amt_msat',
        'minHtlcMsat' => 'min_htlc_msat',
        'maxAcceptedHtlcs' => 'max_accepted_htlcs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'csvDelay' => 'setCsvDelay',
        'chanReserveSat' => 'setChanReserveSat',
        'dustLimitSat' => 'setDustLimitSat',
        'maxPendingAmtMsat' => 'setMaxPendingAmtMsat',
        'minHtlcMsat' => 'setMinHtlcMsat',
        'maxAcceptedHtlcs' => 'setMaxAcceptedHtlcs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'csvDelay' => 'getCsvDelay',
        'chanReserveSat' => 'getChanReserveSat',
        'dustLimitSat' => 'getDustLimitSat',
        'maxPendingAmtMsat' => 'getMaxPendingAmtMsat',
        'minHtlcMsat' => 'getMinHtlcMsat',
        'maxAcceptedHtlcs' => 'getMaxAcceptedHtlcs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['csvDelay'] = isset($data['csvDelay']) ? $data['csvDelay'] : null;
        $this->container['chanReserveSat'] = isset($data['chanReserveSat']) ? $data['chanReserveSat'] : null;
        $this->container['dustLimitSat'] = isset($data['dustLimitSat']) ? $data['dustLimitSat'] : null;
        $this->container['maxPendingAmtMsat'] = isset($data['maxPendingAmtMsat']) ? $data['maxPendingAmtMsat'] : null;
        $this->container['minHtlcMsat'] = isset($data['minHtlcMsat']) ? $data['minHtlcMsat'] : null;
        $this->container['maxAcceptedHtlcs'] = isset($data['maxAcceptedHtlcs']) ? $data['maxAcceptedHtlcs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets csvDelay
     *
     * @return int
     */
    public function getCsvDelay()
    {
        return $this->container['csvDelay'];
    }

    /**
     * Sets csvDelay
     *
     * @param int $csvDelay The CSV delay expressed in relative blocks. If the channel is force closed, we will need to wait for this many blocks before we can regain our funds.
     *
     * @return $this
     */
    public function setCsvDelay($csvDelay)
    {
        $this->container['csvDelay'] = $csvDelay;

        return $this;
    }

    /**
     * Gets chanReserveSat
     *
     * @return string
     */
    public function getChanReserveSat()
    {
        return $this->container['chanReserveSat'];
    }

    /**
     * Sets chanReserveSat
     *
     * @param string $chanReserveSat The minimum satoshis this node is required to reserve in its balance.
     *
     * @return $this
     */
    public function setChanReserveSat($chanReserveSat)
    {
        $this->container['chanReserveSat'] = $chanReserveSat;

        return $this;
    }

    /**
     * Gets dustLimitSat
     *
     * @return string
     */
    public function getDustLimitSat()
    {
        return $this->container['dustLimitSat'];
    }

    /**
     * Sets dustLimitSat
     *
     * @param string $dustLimitSat The dust limit (in satoshis) of the initiator's commitment tx.
     *
     * @return $this
     */
    public function setDustLimitSat($dustLimitSat)
    {
        $this->container['dustLimitSat'] = $dustLimitSat;

        return $this;
    }

    /**
     * Gets maxPendingAmtMsat
     *
     * @return string
     */
    public function getMaxPendingAmtMsat()
    {
        return $this->container['maxPendingAmtMsat'];
    }

    /**
     * Sets maxPendingAmtMsat
     *
     * @param string $maxPendingAmtMsat The maximum amount of coins in millisatoshis that can be pending in this channel.
     *
     * @return $this
     */
    public function setMaxPendingAmtMsat($maxPendingAmtMsat)
    {
        $this->container['maxPendingAmtMsat'] = $maxPendingAmtMsat;

        return $this;
    }

    /**
     * Gets minHtlcMsat
     *
     * @return string
     */
    public function getMinHtlcMsat()
    {
        return $this->container['minHtlcMsat'];
    }

    /**
     * Sets minHtlcMsat
     *
     * @param string $minHtlcMsat The smallest HTLC in millisatoshis that the initiator will accept.
     *
     * @return $this
     */
    public function setMinHtlcMsat($minHtlcMsat)
    {
        $this->container['minHtlcMsat'] = $minHtlcMsat;

        return $this;
    }

    /**
     * Gets maxAcceptedHtlcs
     *
     * @return int
     */
    public function getMaxAcceptedHtlcs()
    {
        return $this->container['maxAcceptedHtlcs'];
    }

    /**
     * Sets maxAcceptedHtlcs
     *
     * @param int $maxAcceptedHtlcs The total number of incoming HTLC's that the initiator will accept.
     *
     * @return $this
     */
    public function setMaxAcceptedHtlcs($maxAcceptedHtlcs)
    {
        $this->container['maxAcceptedHtlcs'] = $maxAcceptedHtlcs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


