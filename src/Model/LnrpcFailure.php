<?php
/**
 * LnrpcFailure
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lnd\Rest\Model;

use \ArrayAccess;
use \Lnd\Rest\ObjectSerializer;

/**
 * LnrpcFailure Class Doc Comment
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LnrpcFailure implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lnrpcFailure';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => '\Lnd\Rest\Model\FailureFailureCode',
        'channelUpdate' => '\Lnd\Rest\Model\LnrpcChannelUpdate',
        'htlcMsat' => 'string',
        'onionSha256' => 'string',
        'cltvExpiry' => 'int',
        'flags' => 'int',
        'failureSourceIndex' => 'int',
        'height' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'channelUpdate' => null,
        'htlcMsat' => 'uint64',
        'onionSha256' => 'byte',
        'cltvExpiry' => 'int64',
        'flags' => 'int64',
        'failureSourceIndex' => 'int64',
        'height' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'channelUpdate' => 'channel_update',
        'htlcMsat' => 'htlc_msat',
        'onionSha256' => 'onion_sha_256',
        'cltvExpiry' => 'cltv_expiry',
        'flags' => 'flags',
        'failureSourceIndex' => 'failure_source_index',
        'height' => 'height'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'channelUpdate' => 'setChannelUpdate',
        'htlcMsat' => 'setHtlcMsat',
        'onionSha256' => 'setOnionSha256',
        'cltvExpiry' => 'setCltvExpiry',
        'flags' => 'setFlags',
        'failureSourceIndex' => 'setFailureSourceIndex',
        'height' => 'setHeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'channelUpdate' => 'getChannelUpdate',
        'htlcMsat' => 'getHtlcMsat',
        'onionSha256' => 'getOnionSha256',
        'cltvExpiry' => 'getCltvExpiry',
        'flags' => 'getFlags',
        'failureSourceIndex' => 'getFailureSourceIndex',
        'height' => 'getHeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['channelUpdate'] = isset($data['channelUpdate']) ? $data['channelUpdate'] : null;
        $this->container['htlcMsat'] = isset($data['htlcMsat']) ? $data['htlcMsat'] : null;
        $this->container['onionSha256'] = isset($data['onionSha256']) ? $data['onionSha256'] : null;
        $this->container['cltvExpiry'] = isset($data['cltvExpiry']) ? $data['cltvExpiry'] : null;
        $this->container['flags'] = isset($data['flags']) ? $data['flags'] : null;
        $this->container['failureSourceIndex'] = isset($data['failureSourceIndex']) ? $data['failureSourceIndex'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['onionSha256']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['onionSha256'])) {
            $invalidProperties[] = "invalid value for 'onionSha256', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return \Lnd\Rest\Model\FailureFailureCode
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param \Lnd\Rest\Model\FailureFailureCode $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets channelUpdate
     *
     * @return \Lnd\Rest\Model\LnrpcChannelUpdate
     */
    public function getChannelUpdate()
    {
        return $this->container['channelUpdate'];
    }

    /**
     * Sets channelUpdate
     *
     * @param \Lnd\Rest\Model\LnrpcChannelUpdate $channelUpdate An optional channel update message.
     *
     * @return $this
     */
    public function setChannelUpdate($channelUpdate)
    {
        $this->container['channelUpdate'] = $channelUpdate;

        return $this;
    }

    /**
     * Gets htlcMsat
     *
     * @return string
     */
    public function getHtlcMsat()
    {
        return $this->container['htlcMsat'];
    }

    /**
     * Sets htlcMsat
     *
     * @param string $htlcMsat A failure type-dependent htlc value.
     *
     * @return $this
     */
    public function setHtlcMsat($htlcMsat)
    {
        $this->container['htlcMsat'] = $htlcMsat;

        return $this;
    }

    /**
     * Gets onionSha256
     *
     * @return string
     */
    public function getOnionSha256()
    {
        return $this->container['onionSha256'];
    }

    /**
     * Sets onionSha256
     *
     * @param string $onionSha256 The sha256 sum of the onion payload.
     *
     * @return $this
     */
    public function setOnionSha256($onionSha256)
    {

        if (!is_null($onionSha256) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $onionSha256))) {
            throw new \InvalidArgumentException("invalid value for $onionSha256 when calling LnrpcFailure., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['onionSha256'] = $onionSha256;

        return $this;
    }

    /**
     * Gets cltvExpiry
     *
     * @return int
     */
    public function getCltvExpiry()
    {
        return $this->container['cltvExpiry'];
    }

    /**
     * Sets cltvExpiry
     *
     * @param int $cltvExpiry A failure type-dependent cltv expiry value.
     *
     * @return $this
     */
    public function setCltvExpiry($cltvExpiry)
    {
        $this->container['cltvExpiry'] = $cltvExpiry;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return int
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param int $flags A failure type-dependent flags value.
     *
     * @return $this
     */
    public function setFlags($flags)
    {
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets failureSourceIndex
     *
     * @return int
     */
    public function getFailureSourceIndex()
    {
        return $this->container['failureSourceIndex'];
    }

    /**
     * Sets failureSourceIndex
     *
     * @param int $failureSourceIndex The position in the path of the intermediate or final node that generated the failure message. Position zero is the sender node.
     *
     * @return $this
     */
    public function setFailureSourceIndex($failureSourceIndex)
    {
        $this->container['failureSourceIndex'] = $failureSourceIndex;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int $height A failure type-dependent block height.
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


