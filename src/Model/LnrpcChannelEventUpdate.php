<?php
/**
 * LnrpcChannelEventUpdate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lnd\Rest\Model;

use \ArrayAccess;
use \Lnd\Rest\ObjectSerializer;

/**
 * LnrpcChannelEventUpdate Class Doc Comment
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LnrpcChannelEventUpdate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lnrpcChannelEventUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'openChannel' => '\Lnd\Rest\Model\LnrpcChannel',
        'closedChannel' => '\Lnd\Rest\Model\LnrpcChannelCloseSummary',
        'activeChannel' => '\Lnd\Rest\Model\LnrpcChannelPoint',
        'inactiveChannel' => '\Lnd\Rest\Model\LnrpcChannelPoint',
        'type' => '\Lnd\Rest\Model\ChannelEventUpdateUpdateType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'openChannel' => null,
        'closedChannel' => null,
        'activeChannel' => null,
        'inactiveChannel' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'openChannel' => 'open_channel',
        'closedChannel' => 'closed_channel',
        'activeChannel' => 'active_channel',
        'inactiveChannel' => 'inactive_channel',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'openChannel' => 'setOpenChannel',
        'closedChannel' => 'setClosedChannel',
        'activeChannel' => 'setActiveChannel',
        'inactiveChannel' => 'setInactiveChannel',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'openChannel' => 'getOpenChannel',
        'closedChannel' => 'getClosedChannel',
        'activeChannel' => 'getActiveChannel',
        'inactiveChannel' => 'getInactiveChannel',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['openChannel'] = isset($data['openChannel']) ? $data['openChannel'] : null;
        $this->container['closedChannel'] = isset($data['closedChannel']) ? $data['closedChannel'] : null;
        $this->container['activeChannel'] = isset($data['activeChannel']) ? $data['activeChannel'] : null;
        $this->container['inactiveChannel'] = isset($data['inactiveChannel']) ? $data['inactiveChannel'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets openChannel
     *
     * @return \Lnd\Rest\Model\LnrpcChannel
     */
    public function getOpenChannel()
    {
        return $this->container['openChannel'];
    }

    /**
     * Sets openChannel
     *
     * @param \Lnd\Rest\Model\LnrpcChannel $openChannel openChannel
     *
     * @return $this
     */
    public function setOpenChannel($openChannel)
    {
        $this->container['openChannel'] = $openChannel;

        return $this;
    }

    /**
     * Gets closedChannel
     *
     * @return \Lnd\Rest\Model\LnrpcChannelCloseSummary
     */
    public function getClosedChannel()
    {
        return $this->container['closedChannel'];
    }

    /**
     * Sets closedChannel
     *
     * @param \Lnd\Rest\Model\LnrpcChannelCloseSummary $closedChannel closedChannel
     *
     * @return $this
     */
    public function setClosedChannel($closedChannel)
    {
        $this->container['closedChannel'] = $closedChannel;

        return $this;
    }

    /**
     * Gets activeChannel
     *
     * @return \Lnd\Rest\Model\LnrpcChannelPoint
     */
    public function getActiveChannel()
    {
        return $this->container['activeChannel'];
    }

    /**
     * Sets activeChannel
     *
     * @param \Lnd\Rest\Model\LnrpcChannelPoint $activeChannel activeChannel
     *
     * @return $this
     */
    public function setActiveChannel($activeChannel)
    {
        $this->container['activeChannel'] = $activeChannel;

        return $this;
    }

    /**
     * Gets inactiveChannel
     *
     * @return \Lnd\Rest\Model\LnrpcChannelPoint
     */
    public function getInactiveChannel()
    {
        return $this->container['inactiveChannel'];
    }

    /**
     * Sets inactiveChannel
     *
     * @param \Lnd\Rest\Model\LnrpcChannelPoint $inactiveChannel inactiveChannel
     *
     * @return $this
     */
    public function setInactiveChannel($inactiveChannel)
    {
        $this->container['inactiveChannel'] = $inactiveChannel;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Lnd\Rest\Model\ChannelEventUpdateUpdateType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Lnd\Rest\Model\ChannelEventUpdateUpdateType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


