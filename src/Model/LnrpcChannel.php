<?php
/**
 * LnrpcChannel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lnd\Rest\Model;

use \ArrayAccess;
use \Lnd\Rest\ObjectSerializer;

/**
 * LnrpcChannel Class Doc Comment
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LnrpcChannel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lnrpcChannel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active' => 'bool',
        'remotePubkey' => 'string',
        'channelPoint' => 'string',
        'chanId' => 'string',
        'capacity' => 'string',
        'localBalance' => 'string',
        'remoteBalance' => 'string',
        'commitFee' => 'string',
        'commitWeight' => 'string',
        'feePerKw' => 'string',
        'unsettledBalance' => 'string',
        'totalSatoshisSent' => 'string',
        'totalSatoshisReceived' => 'string',
        'numUpdates' => 'string',
        'pendingHtlcs' => '\Lnd\Rest\Model\LnrpcHTLC[]',
        'csvDelay' => 'int',
        'private' => 'bool',
        'initiator' => 'bool',
        'chanStatusFlags' => 'string',
        'localChanReserveSat' => 'string',
        'remoteChanReserveSat' => 'string',
        'staticRemoteKey' => 'bool',
        'commitmentType' => '\Lnd\Rest\Model\LnrpcCommitmentType',
        'lifetime' => 'string',
        'uptime' => 'string',
        'closeAddress' => 'string',
        'pushAmountSat' => 'string',
        'thawHeight' => 'int',
        'localConstraints' => '\Lnd\Rest\Model\LnrpcChannelConstraints',
        'remoteConstraints' => '\Lnd\Rest\Model\LnrpcChannelConstraints'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active' => 'boolean',
        'remotePubkey' => null,
        'channelPoint' => null,
        'chanId' => 'uint64',
        'capacity' => 'int64',
        'localBalance' => 'int64',
        'remoteBalance' => 'int64',
        'commitFee' => 'int64',
        'commitWeight' => 'int64',
        'feePerKw' => 'int64',
        'unsettledBalance' => 'int64',
        'totalSatoshisSent' => 'int64',
        'totalSatoshisReceived' => 'int64',
        'numUpdates' => 'uint64',
        'pendingHtlcs' => null,
        'csvDelay' => 'int64',
        'private' => 'boolean',
        'initiator' => 'boolean',
        'chanStatusFlags' => null,
        'localChanReserveSat' => 'int64',
        'remoteChanReserveSat' => 'int64',
        'staticRemoteKey' => 'boolean',
        'commitmentType' => null,
        'lifetime' => 'int64',
        'uptime' => 'int64',
        'closeAddress' => null,
        'pushAmountSat' => 'uint64',
        'thawHeight' => 'int64',
        'localConstraints' => null,
        'remoteConstraints' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'remotePubkey' => 'remote_pubkey',
        'channelPoint' => 'channel_point',
        'chanId' => 'chan_id',
        'capacity' => 'capacity',
        'localBalance' => 'local_balance',
        'remoteBalance' => 'remote_balance',
        'commitFee' => 'commit_fee',
        'commitWeight' => 'commit_weight',
        'feePerKw' => 'fee_per_kw',
        'unsettledBalance' => 'unsettled_balance',
        'totalSatoshisSent' => 'total_satoshis_sent',
        'totalSatoshisReceived' => 'total_satoshis_received',
        'numUpdates' => 'num_updates',
        'pendingHtlcs' => 'pending_htlcs',
        'csvDelay' => 'csv_delay',
        'private' => 'private',
        'initiator' => 'initiator',
        'chanStatusFlags' => 'chan_status_flags',
        'localChanReserveSat' => 'local_chan_reserve_sat',
        'remoteChanReserveSat' => 'remote_chan_reserve_sat',
        'staticRemoteKey' => 'static_remote_key',
        'commitmentType' => 'commitment_type',
        'lifetime' => 'lifetime',
        'uptime' => 'uptime',
        'closeAddress' => 'close_address',
        'pushAmountSat' => 'push_amount_sat',
        'thawHeight' => 'thaw_height',
        'localConstraints' => 'local_constraints',
        'remoteConstraints' => 'remote_constraints'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'remotePubkey' => 'setRemotePubkey',
        'channelPoint' => 'setChannelPoint',
        'chanId' => 'setChanId',
        'capacity' => 'setCapacity',
        'localBalance' => 'setLocalBalance',
        'remoteBalance' => 'setRemoteBalance',
        'commitFee' => 'setCommitFee',
        'commitWeight' => 'setCommitWeight',
        'feePerKw' => 'setFeePerKw',
        'unsettledBalance' => 'setUnsettledBalance',
        'totalSatoshisSent' => 'setTotalSatoshisSent',
        'totalSatoshisReceived' => 'setTotalSatoshisReceived',
        'numUpdates' => 'setNumUpdates',
        'pendingHtlcs' => 'setPendingHtlcs',
        'csvDelay' => 'setCsvDelay',
        'private' => 'setPrivate',
        'initiator' => 'setInitiator',
        'chanStatusFlags' => 'setChanStatusFlags',
        'localChanReserveSat' => 'setLocalChanReserveSat',
        'remoteChanReserveSat' => 'setRemoteChanReserveSat',
        'staticRemoteKey' => 'setStaticRemoteKey',
        'commitmentType' => 'setCommitmentType',
        'lifetime' => 'setLifetime',
        'uptime' => 'setUptime',
        'closeAddress' => 'setCloseAddress',
        'pushAmountSat' => 'setPushAmountSat',
        'thawHeight' => 'setThawHeight',
        'localConstraints' => 'setLocalConstraints',
        'remoteConstraints' => 'setRemoteConstraints'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'remotePubkey' => 'getRemotePubkey',
        'channelPoint' => 'getChannelPoint',
        'chanId' => 'getChanId',
        'capacity' => 'getCapacity',
        'localBalance' => 'getLocalBalance',
        'remoteBalance' => 'getRemoteBalance',
        'commitFee' => 'getCommitFee',
        'commitWeight' => 'getCommitWeight',
        'feePerKw' => 'getFeePerKw',
        'unsettledBalance' => 'getUnsettledBalance',
        'totalSatoshisSent' => 'getTotalSatoshisSent',
        'totalSatoshisReceived' => 'getTotalSatoshisReceived',
        'numUpdates' => 'getNumUpdates',
        'pendingHtlcs' => 'getPendingHtlcs',
        'csvDelay' => 'getCsvDelay',
        'private' => 'getPrivate',
        'initiator' => 'getInitiator',
        'chanStatusFlags' => 'getChanStatusFlags',
        'localChanReserveSat' => 'getLocalChanReserveSat',
        'remoteChanReserveSat' => 'getRemoteChanReserveSat',
        'staticRemoteKey' => 'getStaticRemoteKey',
        'commitmentType' => 'getCommitmentType',
        'lifetime' => 'getLifetime',
        'uptime' => 'getUptime',
        'closeAddress' => 'getCloseAddress',
        'pushAmountSat' => 'getPushAmountSat',
        'thawHeight' => 'getThawHeight',
        'localConstraints' => 'getLocalConstraints',
        'remoteConstraints' => 'getRemoteConstraints'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['remotePubkey'] = isset($data['remotePubkey']) ? $data['remotePubkey'] : null;
        $this->container['channelPoint'] = isset($data['channelPoint']) ? $data['channelPoint'] : null;
        $this->container['chanId'] = isset($data['chanId']) ? $data['chanId'] : null;
        $this->container['capacity'] = isset($data['capacity']) ? $data['capacity'] : null;
        $this->container['localBalance'] = isset($data['localBalance']) ? $data['localBalance'] : null;
        $this->container['remoteBalance'] = isset($data['remoteBalance']) ? $data['remoteBalance'] : null;
        $this->container['commitFee'] = isset($data['commitFee']) ? $data['commitFee'] : null;
        $this->container['commitWeight'] = isset($data['commitWeight']) ? $data['commitWeight'] : null;
        $this->container['feePerKw'] = isset($data['feePerKw']) ? $data['feePerKw'] : null;
        $this->container['unsettledBalance'] = isset($data['unsettledBalance']) ? $data['unsettledBalance'] : null;
        $this->container['totalSatoshisSent'] = isset($data['totalSatoshisSent']) ? $data['totalSatoshisSent'] : null;
        $this->container['totalSatoshisReceived'] = isset($data['totalSatoshisReceived']) ? $data['totalSatoshisReceived'] : null;
        $this->container['numUpdates'] = isset($data['numUpdates']) ? $data['numUpdates'] : null;
        $this->container['pendingHtlcs'] = isset($data['pendingHtlcs']) ? $data['pendingHtlcs'] : null;
        $this->container['csvDelay'] = isset($data['csvDelay']) ? $data['csvDelay'] : null;
        $this->container['private'] = isset($data['private']) ? $data['private'] : null;
        $this->container['initiator'] = isset($data['initiator']) ? $data['initiator'] : null;
        $this->container['chanStatusFlags'] = isset($data['chanStatusFlags']) ? $data['chanStatusFlags'] : null;
        $this->container['localChanReserveSat'] = isset($data['localChanReserveSat']) ? $data['localChanReserveSat'] : null;
        $this->container['remoteChanReserveSat'] = isset($data['remoteChanReserveSat']) ? $data['remoteChanReserveSat'] : null;
        $this->container['staticRemoteKey'] = isset($data['staticRemoteKey']) ? $data['staticRemoteKey'] : null;
        $this->container['commitmentType'] = isset($data['commitmentType']) ? $data['commitmentType'] : null;
        $this->container['lifetime'] = isset($data['lifetime']) ? $data['lifetime'] : null;
        $this->container['uptime'] = isset($data['uptime']) ? $data['uptime'] : null;
        $this->container['closeAddress'] = isset($data['closeAddress']) ? $data['closeAddress'] : null;
        $this->container['pushAmountSat'] = isset($data['pushAmountSat']) ? $data['pushAmountSat'] : null;
        $this->container['thawHeight'] = isset($data['thawHeight']) ? $data['thawHeight'] : null;
        $this->container['localConstraints'] = isset($data['localConstraints']) ? $data['localConstraints'] : null;
        $this->container['remoteConstraints'] = isset($data['remoteConstraints']) ? $data['remoteConstraints'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets remotePubkey
     *
     * @return string
     */
    public function getRemotePubkey()
    {
        return $this->container['remotePubkey'];
    }

    /**
     * Sets remotePubkey
     *
     * @param string $remotePubkey remotePubkey
     *
     * @return $this
     */
    public function setRemotePubkey($remotePubkey)
    {
        $this->container['remotePubkey'] = $remotePubkey;

        return $this;
    }

    /**
     * Gets channelPoint
     *
     * @return string
     */
    public function getChannelPoint()
    {
        return $this->container['channelPoint'];
    }

    /**
     * Sets channelPoint
     *
     * @param string $channelPoint The outpoint (txid:index) of the funding transaction. With this value, Bob will be able to generate a signature for Alice's version of the commitment transaction.
     *
     * @return $this
     */
    public function setChannelPoint($channelPoint)
    {
        $this->container['channelPoint'] = $channelPoint;

        return $this;
    }

    /**
     * Gets chanId
     *
     * @return string
     */
    public function getChanId()
    {
        return $this->container['chanId'];
    }

    /**
     * Sets chanId
     *
     * @param string $chanId The unique channel ID for the channel. The first 3 bytes are the block height, the next 3 the index within the block, and the last 2 bytes are the output index for the channel.
     *
     * @return $this
     */
    public function setChanId($chanId)
    {
        $this->container['chanId'] = $chanId;

        return $this;
    }

    /**
     * Gets capacity
     *
     * @return string
     */
    public function getCapacity()
    {
        return $this->container['capacity'];
    }

    /**
     * Sets capacity
     *
     * @param string $capacity capacity
     *
     * @return $this
     */
    public function setCapacity($capacity)
    {
        $this->container['capacity'] = $capacity;

        return $this;
    }

    /**
     * Gets localBalance
     *
     * @return string
     */
    public function getLocalBalance()
    {
        return $this->container['localBalance'];
    }

    /**
     * Sets localBalance
     *
     * @param string $localBalance localBalance
     *
     * @return $this
     */
    public function setLocalBalance($localBalance)
    {
        $this->container['localBalance'] = $localBalance;

        return $this;
    }

    /**
     * Gets remoteBalance
     *
     * @return string
     */
    public function getRemoteBalance()
    {
        return $this->container['remoteBalance'];
    }

    /**
     * Sets remoteBalance
     *
     * @param string $remoteBalance remoteBalance
     *
     * @return $this
     */
    public function setRemoteBalance($remoteBalance)
    {
        $this->container['remoteBalance'] = $remoteBalance;

        return $this;
    }

    /**
     * Gets commitFee
     *
     * @return string
     */
    public function getCommitFee()
    {
        return $this->container['commitFee'];
    }

    /**
     * Sets commitFee
     *
     * @param string $commitFee The amount calculated to be paid in fees for the current set of commitment transactions. The fee amount is persisted with the channel in order to allow the fee amount to be removed and recalculated with each channel state update, including updates that happen after a system restart.
     *
     * @return $this
     */
    public function setCommitFee($commitFee)
    {
        $this->container['commitFee'] = $commitFee;

        return $this;
    }

    /**
     * Gets commitWeight
     *
     * @return string
     */
    public function getCommitWeight()
    {
        return $this->container['commitWeight'];
    }

    /**
     * Sets commitWeight
     *
     * @param string $commitWeight commitWeight
     *
     * @return $this
     */
    public function setCommitWeight($commitWeight)
    {
        $this->container['commitWeight'] = $commitWeight;

        return $this;
    }

    /**
     * Gets feePerKw
     *
     * @return string
     */
    public function getFeePerKw()
    {
        return $this->container['feePerKw'];
    }

    /**
     * Sets feePerKw
     *
     * @param string $feePerKw The required number of satoshis per kilo-weight that the requester will pay at all times, for both the funding transaction and commitment transaction. This value can later be updated once the channel is open.
     *
     * @return $this
     */
    public function setFeePerKw($feePerKw)
    {
        $this->container['feePerKw'] = $feePerKw;

        return $this;
    }

    /**
     * Gets unsettledBalance
     *
     * @return string
     */
    public function getUnsettledBalance()
    {
        return $this->container['unsettledBalance'];
    }

    /**
     * Sets unsettledBalance
     *
     * @param string $unsettledBalance unsettledBalance
     *
     * @return $this
     */
    public function setUnsettledBalance($unsettledBalance)
    {
        $this->container['unsettledBalance'] = $unsettledBalance;

        return $this;
    }

    /**
     * Gets totalSatoshisSent
     *
     * @return string
     */
    public function getTotalSatoshisSent()
    {
        return $this->container['totalSatoshisSent'];
    }

    /**
     * Sets totalSatoshisSent
     *
     * @param string $totalSatoshisSent The total number of satoshis we've sent within this channel.
     *
     * @return $this
     */
    public function setTotalSatoshisSent($totalSatoshisSent)
    {
        $this->container['totalSatoshisSent'] = $totalSatoshisSent;

        return $this;
    }

    /**
     * Gets totalSatoshisReceived
     *
     * @return string
     */
    public function getTotalSatoshisReceived()
    {
        return $this->container['totalSatoshisReceived'];
    }

    /**
     * Sets totalSatoshisReceived
     *
     * @param string $totalSatoshisReceived The total number of satoshis we've received within this channel.
     *
     * @return $this
     */
    public function setTotalSatoshisReceived($totalSatoshisReceived)
    {
        $this->container['totalSatoshisReceived'] = $totalSatoshisReceived;

        return $this;
    }

    /**
     * Gets numUpdates
     *
     * @return string
     */
    public function getNumUpdates()
    {
        return $this->container['numUpdates'];
    }

    /**
     * Sets numUpdates
     *
     * @param string $numUpdates The total number of updates conducted within this channel.
     *
     * @return $this
     */
    public function setNumUpdates($numUpdates)
    {
        $this->container['numUpdates'] = $numUpdates;

        return $this;
    }

    /**
     * Gets pendingHtlcs
     *
     * @return \Lnd\Rest\Model\LnrpcHTLC[]
     */
    public function getPendingHtlcs()
    {
        return $this->container['pendingHtlcs'];
    }

    /**
     * Sets pendingHtlcs
     *
     * @param \Lnd\Rest\Model\LnrpcHTLC[] $pendingHtlcs The list of active, uncleared HTLCs currently pending within the channel.
     *
     * @return $this
     */
    public function setPendingHtlcs($pendingHtlcs)
    {
        $this->container['pendingHtlcs'] = $pendingHtlcs;

        return $this;
    }

    /**
     * Gets csvDelay
     *
     * @return int
     */
    public function getCsvDelay()
    {
        return $this->container['csvDelay'];
    }

    /**
     * Sets csvDelay
     *
     * @param int $csvDelay Deprecated. The CSV delay expressed in relative blocks. If the channel is force closed, we will need to wait for this many blocks before we can regain our funds.
     *
     * @return $this
     */
    public function setCsvDelay($csvDelay)
    {
        $this->container['csvDelay'] = $csvDelay;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool $private Whether this channel is advertised to the network or not.
     *
     * @return $this
     */
    public function setPrivate($private)
    {
        $this->container['private'] = $private;

        return $this;
    }

    /**
     * Gets initiator
     *
     * @return bool
     */
    public function getInitiator()
    {
        return $this->container['initiator'];
    }

    /**
     * Sets initiator
     *
     * @param bool $initiator True if we were the ones that created the channel.
     *
     * @return $this
     */
    public function setInitiator($initiator)
    {
        $this->container['initiator'] = $initiator;

        return $this;
    }

    /**
     * Gets chanStatusFlags
     *
     * @return string
     */
    public function getChanStatusFlags()
    {
        return $this->container['chanStatusFlags'];
    }

    /**
     * Sets chanStatusFlags
     *
     * @param string $chanStatusFlags A set of flags showing the current state of the channel.
     *
     * @return $this
     */
    public function setChanStatusFlags($chanStatusFlags)
    {
        $this->container['chanStatusFlags'] = $chanStatusFlags;

        return $this;
    }

    /**
     * Gets localChanReserveSat
     *
     * @return string
     */
    public function getLocalChanReserveSat()
    {
        return $this->container['localChanReserveSat'];
    }

    /**
     * Sets localChanReserveSat
     *
     * @param string $localChanReserveSat Deprecated. The minimum satoshis this node is required to reserve in its balance.
     *
     * @return $this
     */
    public function setLocalChanReserveSat($localChanReserveSat)
    {
        $this->container['localChanReserveSat'] = $localChanReserveSat;

        return $this;
    }

    /**
     * Gets remoteChanReserveSat
     *
     * @return string
     */
    public function getRemoteChanReserveSat()
    {
        return $this->container['remoteChanReserveSat'];
    }

    /**
     * Sets remoteChanReserveSat
     *
     * @param string $remoteChanReserveSat Deprecated. The minimum satoshis the other node is required to reserve in its balance.
     *
     * @return $this
     */
    public function setRemoteChanReserveSat($remoteChanReserveSat)
    {
        $this->container['remoteChanReserveSat'] = $remoteChanReserveSat;

        return $this;
    }

    /**
     * Gets staticRemoteKey
     *
     * @return bool
     */
    public function getStaticRemoteKey()
    {
        return $this->container['staticRemoteKey'];
    }

    /**
     * Sets staticRemoteKey
     *
     * @param bool $staticRemoteKey Deprecated. Use commitment_type.
     *
     * @return $this
     */
    public function setStaticRemoteKey($staticRemoteKey)
    {
        $this->container['staticRemoteKey'] = $staticRemoteKey;

        return $this;
    }

    /**
     * Gets commitmentType
     *
     * @return \Lnd\Rest\Model\LnrpcCommitmentType
     */
    public function getCommitmentType()
    {
        return $this->container['commitmentType'];
    }

    /**
     * Sets commitmentType
     *
     * @param \Lnd\Rest\Model\LnrpcCommitmentType $commitmentType The commitment type used by this channel.
     *
     * @return $this
     */
    public function setCommitmentType($commitmentType)
    {
        $this->container['commitmentType'] = $commitmentType;

        return $this;
    }

    /**
     * Gets lifetime
     *
     * @return string
     */
    public function getLifetime()
    {
        return $this->container['lifetime'];
    }

    /**
     * Sets lifetime
     *
     * @param string $lifetime The number of seconds that the channel has been monitored by the channel scoring system. Scores are currently not persisted, so this value may be less than the lifetime of the channel [EXPERIMENTAL].
     *
     * @return $this
     */
    public function setLifetime($lifetime)
    {
        $this->container['lifetime'] = $lifetime;

        return $this;
    }

    /**
     * Gets uptime
     *
     * @return string
     */
    public function getUptime()
    {
        return $this->container['uptime'];
    }

    /**
     * Sets uptime
     *
     * @param string $uptime The number of seconds that the remote peer has been observed as being online by the channel scoring system over the lifetime of the channel [EXPERIMENTAL].
     *
     * @return $this
     */
    public function setUptime($uptime)
    {
        $this->container['uptime'] = $uptime;

        return $this;
    }

    /**
     * Gets closeAddress
     *
     * @return string
     */
    public function getCloseAddress()
    {
        return $this->container['closeAddress'];
    }

    /**
     * Sets closeAddress
     *
     * @param string $closeAddress Close address is the address that we will enforce payout to on cooperative close if the channel was opened utilizing option upfront shutdown. This value can be set on channel open by setting close_address in an open channel request. If this value is not set, you can still choose a payout address by cooperatively closing with the delivery_address field set.
     *
     * @return $this
     */
    public function setCloseAddress($closeAddress)
    {
        $this->container['closeAddress'] = $closeAddress;

        return $this;
    }

    /**
     * Gets pushAmountSat
     *
     * @return string
     */
    public function getPushAmountSat()
    {
        return $this->container['pushAmountSat'];
    }

    /**
     * Sets pushAmountSat
     *
     * @param string $pushAmountSat The amount that the initiator of the channel optionally pushed to the remote party on channel open. This amount will be zero if the channel initiator did not push any funds to the remote peer. If the initiator field is true, we pushed this amount to our peer, if it is false, the remote peer pushed this amount to us.
     *
     * @return $this
     */
    public function setPushAmountSat($pushAmountSat)
    {
        $this->container['pushAmountSat'] = $pushAmountSat;

        return $this;
    }

    /**
     * Gets thawHeight
     *
     * @return int
     */
    public function getThawHeight()
    {
        return $this->container['thawHeight'];
    }

    /**
     * Sets thawHeight
     *
     * @param int $thawHeight This uint32 indicates if this channel is to be considered 'frozen'. A frozen channel doest not allow a cooperative channel close by the initiator. The thaw_height is the height that this restriction stops applying to the channel. This field is optional, not setting it or using a value of zero will mean the channel has no additional restrictions. The height can be interpreted in two ways: as a relative height if the value is less than 500,000, or as an absolute height otherwise.
     *
     * @return $this
     */
    public function setThawHeight($thawHeight)
    {
        $this->container['thawHeight'] = $thawHeight;

        return $this;
    }

    /**
     * Gets localConstraints
     *
     * @return \Lnd\Rest\Model\LnrpcChannelConstraints
     */
    public function getLocalConstraints()
    {
        return $this->container['localConstraints'];
    }

    /**
     * Sets localConstraints
     *
     * @param \Lnd\Rest\Model\LnrpcChannelConstraints $localConstraints List constraints for the local node.
     *
     * @return $this
     */
    public function setLocalConstraints($localConstraints)
    {
        $this->container['localConstraints'] = $localConstraints;

        return $this;
    }

    /**
     * Gets remoteConstraints
     *
     * @return \Lnd\Rest\Model\LnrpcChannelConstraints
     */
    public function getRemoteConstraints()
    {
        return $this->container['remoteConstraints'];
    }

    /**
     * Sets remoteConstraints
     *
     * @param \Lnd\Rest\Model\LnrpcChannelConstraints $remoteConstraints List constraints for the remote node.
     *
     * @return $this
     */
    public function setRemoteConstraints($remoteConstraints)
    {
        $this->container['remoteConstraints'] = $remoteConstraints;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


