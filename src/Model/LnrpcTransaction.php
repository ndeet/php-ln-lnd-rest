<?php
/**
 * LnrpcTransaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lnd\Rest\Model;

use \ArrayAccess;
use \Lnd\Rest\ObjectSerializer;

/**
 * LnrpcTransaction Class Doc Comment
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LnrpcTransaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lnrpcTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'txHash' => 'string',
        'amount' => 'string',
        'numConfirmations' => 'int',
        'blockHash' => 'string',
        'blockHeight' => 'int',
        'timeStamp' => 'string',
        'totalFees' => 'string',
        'destAddresses' => 'string[]',
        'rawTxHex' => 'string',
        'label' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'txHash' => null,
        'amount' => 'int64',
        'numConfirmations' => 'int32',
        'blockHash' => null,
        'blockHeight' => 'int32',
        'timeStamp' => 'int64',
        'totalFees' => 'int64',
        'destAddresses' => null,
        'rawTxHex' => null,
        'label' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'txHash' => 'tx_hash',
        'amount' => 'amount',
        'numConfirmations' => 'num_confirmations',
        'blockHash' => 'block_hash',
        'blockHeight' => 'block_height',
        'timeStamp' => 'time_stamp',
        'totalFees' => 'total_fees',
        'destAddresses' => 'dest_addresses',
        'rawTxHex' => 'raw_tx_hex',
        'label' => 'label'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'txHash' => 'setTxHash',
        'amount' => 'setAmount',
        'numConfirmations' => 'setNumConfirmations',
        'blockHash' => 'setBlockHash',
        'blockHeight' => 'setBlockHeight',
        'timeStamp' => 'setTimeStamp',
        'totalFees' => 'setTotalFees',
        'destAddresses' => 'setDestAddresses',
        'rawTxHex' => 'setRawTxHex',
        'label' => 'setLabel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'txHash' => 'getTxHash',
        'amount' => 'getAmount',
        'numConfirmations' => 'getNumConfirmations',
        'blockHash' => 'getBlockHash',
        'blockHeight' => 'getBlockHeight',
        'timeStamp' => 'getTimeStamp',
        'totalFees' => 'getTotalFees',
        'destAddresses' => 'getDestAddresses',
        'rawTxHex' => 'getRawTxHex',
        'label' => 'getLabel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['txHash'] = isset($data['txHash']) ? $data['txHash'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['numConfirmations'] = isset($data['numConfirmations']) ? $data['numConfirmations'] : null;
        $this->container['blockHash'] = isset($data['blockHash']) ? $data['blockHash'] : null;
        $this->container['blockHeight'] = isset($data['blockHeight']) ? $data['blockHeight'] : null;
        $this->container['timeStamp'] = isset($data['timeStamp']) ? $data['timeStamp'] : null;
        $this->container['totalFees'] = isset($data['totalFees']) ? $data['totalFees'] : null;
        $this->container['destAddresses'] = isset($data['destAddresses']) ? $data['destAddresses'] : null;
        $this->container['rawTxHex'] = isset($data['rawTxHex']) ? $data['rawTxHex'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets txHash
     *
     * @return string
     */
    public function getTxHash()
    {
        return $this->container['txHash'];
    }

    /**
     * Sets txHash
     *
     * @param string $txHash txHash
     *
     * @return $this
     */
    public function setTxHash($txHash)
    {
        $this->container['txHash'] = $txHash;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets numConfirmations
     *
     * @return int
     */
    public function getNumConfirmations()
    {
        return $this->container['numConfirmations'];
    }

    /**
     * Sets numConfirmations
     *
     * @param int $numConfirmations numConfirmations
     *
     * @return $this
     */
    public function setNumConfirmations($numConfirmations)
    {
        $this->container['numConfirmations'] = $numConfirmations;

        return $this;
    }

    /**
     * Gets blockHash
     *
     * @return string
     */
    public function getBlockHash()
    {
        return $this->container['blockHash'];
    }

    /**
     * Sets blockHash
     *
     * @param string $blockHash blockHash
     *
     * @return $this
     */
    public function setBlockHash($blockHash)
    {
        $this->container['blockHash'] = $blockHash;

        return $this;
    }

    /**
     * Gets blockHeight
     *
     * @return int
     */
    public function getBlockHeight()
    {
        return $this->container['blockHeight'];
    }

    /**
     * Sets blockHeight
     *
     * @param int $blockHeight blockHeight
     *
     * @return $this
     */
    public function setBlockHeight($blockHeight)
    {
        $this->container['blockHeight'] = $blockHeight;

        return $this;
    }

    /**
     * Gets timeStamp
     *
     * @return string
     */
    public function getTimeStamp()
    {
        return $this->container['timeStamp'];
    }

    /**
     * Sets timeStamp
     *
     * @param string $timeStamp timeStamp
     *
     * @return $this
     */
    public function setTimeStamp($timeStamp)
    {
        $this->container['timeStamp'] = $timeStamp;

        return $this;
    }

    /**
     * Gets totalFees
     *
     * @return string
     */
    public function getTotalFees()
    {
        return $this->container['totalFees'];
    }

    /**
     * Sets totalFees
     *
     * @param string $totalFees totalFees
     *
     * @return $this
     */
    public function setTotalFees($totalFees)
    {
        $this->container['totalFees'] = $totalFees;

        return $this;
    }

    /**
     * Gets destAddresses
     *
     * @return string[]
     */
    public function getDestAddresses()
    {
        return $this->container['destAddresses'];
    }

    /**
     * Sets destAddresses
     *
     * @param string[] $destAddresses destAddresses
     *
     * @return $this
     */
    public function setDestAddresses($destAddresses)
    {
        $this->container['destAddresses'] = $destAddresses;

        return $this;
    }

    /**
     * Gets rawTxHex
     *
     * @return string
     */
    public function getRawTxHex()
    {
        return $this->container['rawTxHex'];
    }

    /**
     * Sets rawTxHex
     *
     * @param string $rawTxHex The raw transaction hex.
     *
     * @return $this
     */
    public function setRawTxHex($rawTxHex)
    {
        $this->container['rawTxHex'] = $rawTxHex;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label A label that was optionally set on transaction broadcast.
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


