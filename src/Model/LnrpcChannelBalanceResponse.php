<?php
/**
 * LnrpcChannelBalanceResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lnd\Rest\Model;

use \ArrayAccess;
use \Lnd\Rest\ObjectSerializer;

/**
 * LnrpcChannelBalanceResponse Class Doc Comment
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LnrpcChannelBalanceResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lnrpcChannelBalanceResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'balance' => 'string',
        'pendingOpenBalance' => 'string',
        'localBalance' => '\Lnd\Rest\Model\LnrpcAmount',
        'remoteBalance' => '\Lnd\Rest\Model\LnrpcAmount',
        'unsettledLocalBalance' => '\Lnd\Rest\Model\LnrpcAmount',
        'unsettledRemoteBalance' => '\Lnd\Rest\Model\LnrpcAmount',
        'pendingOpenLocalBalance' => '\Lnd\Rest\Model\LnrpcAmount',
        'pendingOpenRemoteBalance' => '\Lnd\Rest\Model\LnrpcAmount'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'balance' => 'int64',
        'pendingOpenBalance' => 'int64',
        'localBalance' => null,
        'remoteBalance' => null,
        'unsettledLocalBalance' => null,
        'unsettledRemoteBalance' => null,
        'pendingOpenLocalBalance' => null,
        'pendingOpenRemoteBalance' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'balance' => 'balance',
        'pendingOpenBalance' => 'pending_open_balance',
        'localBalance' => 'local_balance',
        'remoteBalance' => 'remote_balance',
        'unsettledLocalBalance' => 'unsettled_local_balance',
        'unsettledRemoteBalance' => 'unsettled_remote_balance',
        'pendingOpenLocalBalance' => 'pending_open_local_balance',
        'pendingOpenRemoteBalance' => 'pending_open_remote_balance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'balance' => 'setBalance',
        'pendingOpenBalance' => 'setPendingOpenBalance',
        'localBalance' => 'setLocalBalance',
        'remoteBalance' => 'setRemoteBalance',
        'unsettledLocalBalance' => 'setUnsettledLocalBalance',
        'unsettledRemoteBalance' => 'setUnsettledRemoteBalance',
        'pendingOpenLocalBalance' => 'setPendingOpenLocalBalance',
        'pendingOpenRemoteBalance' => 'setPendingOpenRemoteBalance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'balance' => 'getBalance',
        'pendingOpenBalance' => 'getPendingOpenBalance',
        'localBalance' => 'getLocalBalance',
        'remoteBalance' => 'getRemoteBalance',
        'unsettledLocalBalance' => 'getUnsettledLocalBalance',
        'unsettledRemoteBalance' => 'getUnsettledRemoteBalance',
        'pendingOpenLocalBalance' => 'getPendingOpenLocalBalance',
        'pendingOpenRemoteBalance' => 'getPendingOpenRemoteBalance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['pendingOpenBalance'] = isset($data['pendingOpenBalance']) ? $data['pendingOpenBalance'] : null;
        $this->container['localBalance'] = isset($data['localBalance']) ? $data['localBalance'] : null;
        $this->container['remoteBalance'] = isset($data['remoteBalance']) ? $data['remoteBalance'] : null;
        $this->container['unsettledLocalBalance'] = isset($data['unsettledLocalBalance']) ? $data['unsettledLocalBalance'] : null;
        $this->container['unsettledRemoteBalance'] = isset($data['unsettledRemoteBalance']) ? $data['unsettledRemoteBalance'] : null;
        $this->container['pendingOpenLocalBalance'] = isset($data['pendingOpenLocalBalance']) ? $data['pendingOpenLocalBalance'] : null;
        $this->container['pendingOpenRemoteBalance'] = isset($data['pendingOpenRemoteBalance']) ? $data['pendingOpenRemoteBalance'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets balance
     *
     * @return string
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param string $balance balance
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets pendingOpenBalance
     *
     * @return string
     */
    public function getPendingOpenBalance()
    {
        return $this->container['pendingOpenBalance'];
    }

    /**
     * Sets pendingOpenBalance
     *
     * @param string $pendingOpenBalance pendingOpenBalance
     *
     * @return $this
     */
    public function setPendingOpenBalance($pendingOpenBalance)
    {
        $this->container['pendingOpenBalance'] = $pendingOpenBalance;

        return $this;
    }

    /**
     * Gets localBalance
     *
     * @return \Lnd\Rest\Model\LnrpcAmount
     */
    public function getLocalBalance()
    {
        return $this->container['localBalance'];
    }

    /**
     * Sets localBalance
     *
     * @param \Lnd\Rest\Model\LnrpcAmount $localBalance Sum of channels local balances.
     *
     * @return $this
     */
    public function setLocalBalance($localBalance)
    {
        $this->container['localBalance'] = $localBalance;

        return $this;
    }

    /**
     * Gets remoteBalance
     *
     * @return \Lnd\Rest\Model\LnrpcAmount
     */
    public function getRemoteBalance()
    {
        return $this->container['remoteBalance'];
    }

    /**
     * Sets remoteBalance
     *
     * @param \Lnd\Rest\Model\LnrpcAmount $remoteBalance Sum of channels remote balances.
     *
     * @return $this
     */
    public function setRemoteBalance($remoteBalance)
    {
        $this->container['remoteBalance'] = $remoteBalance;

        return $this;
    }

    /**
     * Gets unsettledLocalBalance
     *
     * @return \Lnd\Rest\Model\LnrpcAmount
     */
    public function getUnsettledLocalBalance()
    {
        return $this->container['unsettledLocalBalance'];
    }

    /**
     * Sets unsettledLocalBalance
     *
     * @param \Lnd\Rest\Model\LnrpcAmount $unsettledLocalBalance Sum of channels local unsettled balances.
     *
     * @return $this
     */
    public function setUnsettledLocalBalance($unsettledLocalBalance)
    {
        $this->container['unsettledLocalBalance'] = $unsettledLocalBalance;

        return $this;
    }

    /**
     * Gets unsettledRemoteBalance
     *
     * @return \Lnd\Rest\Model\LnrpcAmount
     */
    public function getUnsettledRemoteBalance()
    {
        return $this->container['unsettledRemoteBalance'];
    }

    /**
     * Sets unsettledRemoteBalance
     *
     * @param \Lnd\Rest\Model\LnrpcAmount $unsettledRemoteBalance Sum of channels remote unsettled balances.
     *
     * @return $this
     */
    public function setUnsettledRemoteBalance($unsettledRemoteBalance)
    {
        $this->container['unsettledRemoteBalance'] = $unsettledRemoteBalance;

        return $this;
    }

    /**
     * Gets pendingOpenLocalBalance
     *
     * @return \Lnd\Rest\Model\LnrpcAmount
     */
    public function getPendingOpenLocalBalance()
    {
        return $this->container['pendingOpenLocalBalance'];
    }

    /**
     * Sets pendingOpenLocalBalance
     *
     * @param \Lnd\Rest\Model\LnrpcAmount $pendingOpenLocalBalance Sum of channels pending local balances.
     *
     * @return $this
     */
    public function setPendingOpenLocalBalance($pendingOpenLocalBalance)
    {
        $this->container['pendingOpenLocalBalance'] = $pendingOpenLocalBalance;

        return $this;
    }

    /**
     * Gets pendingOpenRemoteBalance
     *
     * @return \Lnd\Rest\Model\LnrpcAmount
     */
    public function getPendingOpenRemoteBalance()
    {
        return $this->container['pendingOpenRemoteBalance'];
    }

    /**
     * Sets pendingOpenRemoteBalance
     *
     * @param \Lnd\Rest\Model\LnrpcAmount $pendingOpenRemoteBalance Sum of channels pending remote balances.
     *
     * @return $this
     */
    public function setPendingOpenRemoteBalance($pendingOpenRemoteBalance)
    {
        $this->container['pendingOpenRemoteBalance'] = $pendingOpenRemoteBalance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


