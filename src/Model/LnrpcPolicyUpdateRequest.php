<?php
/**
 * LnrpcPolicyUpdateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lnd\Rest\Model;

use \ArrayAccess;
use \Lnd\Rest\ObjectSerializer;

/**
 * LnrpcPolicyUpdateRequest Class Doc Comment
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LnrpcPolicyUpdateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lnrpcPolicyUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'global' => 'bool',
        'chanPoint' => '\Lnd\Rest\Model\LnrpcChannelPoint',
        'baseFeeMsat' => 'string',
        'feeRate' => 'double',
        'timeLockDelta' => 'int',
        'maxHtlcMsat' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'global' => 'boolean',
        'chanPoint' => null,
        'baseFeeMsat' => 'int64',
        'feeRate' => 'double',
        'timeLockDelta' => 'int64',
        'maxHtlcMsat' => 'uint64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'global' => 'global',
        'chanPoint' => 'chan_point',
        'baseFeeMsat' => 'base_fee_msat',
        'feeRate' => 'fee_rate',
        'timeLockDelta' => 'time_lock_delta',
        'maxHtlcMsat' => 'max_htlc_msat'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'global' => 'setGlobal',
        'chanPoint' => 'setChanPoint',
        'baseFeeMsat' => 'setBaseFeeMsat',
        'feeRate' => 'setFeeRate',
        'timeLockDelta' => 'setTimeLockDelta',
        'maxHtlcMsat' => 'setMaxHtlcMsat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'global' => 'getGlobal',
        'chanPoint' => 'getChanPoint',
        'baseFeeMsat' => 'getBaseFeeMsat',
        'feeRate' => 'getFeeRate',
        'timeLockDelta' => 'getTimeLockDelta',
        'maxHtlcMsat' => 'getMaxHtlcMsat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['global'] = isset($data['global']) ? $data['global'] : null;
        $this->container['chanPoint'] = isset($data['chanPoint']) ? $data['chanPoint'] : null;
        $this->container['baseFeeMsat'] = isset($data['baseFeeMsat']) ? $data['baseFeeMsat'] : null;
        $this->container['feeRate'] = isset($data['feeRate']) ? $data['feeRate'] : null;
        $this->container['timeLockDelta'] = isset($data['timeLockDelta']) ? $data['timeLockDelta'] : null;
        $this->container['maxHtlcMsat'] = isset($data['maxHtlcMsat']) ? $data['maxHtlcMsat'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets global
     *
     * @return bool
     */
    public function getGlobal()
    {
        return $this->container['global'];
    }

    /**
     * Sets global
     *
     * @param bool $global / If set, then this update applies to all currently active channels.
     *
     * @return $this
     */
    public function setGlobal($global)
    {
        $this->container['global'] = $global;

        return $this;
    }

    /**
     * Gets chanPoint
     *
     * @return \Lnd\Rest\Model\LnrpcChannelPoint
     */
    public function getChanPoint()
    {
        return $this->container['chanPoint'];
    }

    /**
     * Sets chanPoint
     *
     * @param \Lnd\Rest\Model\LnrpcChannelPoint $chanPoint / If set, this update will target a specific channel.
     *
     * @return $this
     */
    public function setChanPoint($chanPoint)
    {
        $this->container['chanPoint'] = $chanPoint;

        return $this;
    }

    /**
     * Gets baseFeeMsat
     *
     * @return string
     */
    public function getBaseFeeMsat()
    {
        return $this->container['baseFeeMsat'];
    }

    /**
     * Sets baseFeeMsat
     *
     * @param string $baseFeeMsat / The base fee charged regardless of the number of milli-satoshis sent.
     *
     * @return $this
     */
    public function setBaseFeeMsat($baseFeeMsat)
    {
        $this->container['baseFeeMsat'] = $baseFeeMsat;

        return $this;
    }

    /**
     * Gets feeRate
     *
     * @return double
     */
    public function getFeeRate()
    {
        return $this->container['feeRate'];
    }

    /**
     * Sets feeRate
     *
     * @param double $feeRate / The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
     *
     * @return $this
     */
    public function setFeeRate($feeRate)
    {
        $this->container['feeRate'] = $feeRate;

        return $this;
    }

    /**
     * Gets timeLockDelta
     *
     * @return int
     */
    public function getTimeLockDelta()
    {
        return $this->container['timeLockDelta'];
    }

    /**
     * Sets timeLockDelta
     *
     * @param int $timeLockDelta / The required timelock delta for HTLCs forwarded over the channel.
     *
     * @return $this
     */
    public function setTimeLockDelta($timeLockDelta)
    {
        $this->container['timeLockDelta'] = $timeLockDelta;

        return $this;
    }

    /**
     * Gets maxHtlcMsat
     *
     * @return string
     */
    public function getMaxHtlcMsat()
    {
        return $this->container['maxHtlcMsat'];
    }

    /**
     * Sets maxHtlcMsat
     *
     * @param string $maxHtlcMsat / If set, the maximum HTLC size in milli-satoshis. If unset, the maximum HTLC will be unchanged.
     *
     * @return $this
     */
    public function setMaxHtlcMsat($maxHtlcMsat)
    {
        $this->container['maxHtlcMsat'] = $maxHtlcMsat;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


