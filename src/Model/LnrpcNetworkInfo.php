<?php
/**
 * LnrpcNetworkInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lnd\Rest\Model;

use \ArrayAccess;
use \Lnd\Rest\ObjectSerializer;

/**
 * LnrpcNetworkInfo Class Doc Comment
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LnrpcNetworkInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lnrpcNetworkInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'graphDiameter' => 'int',
        'avgOutDegree' => 'double',
        'maxOutDegree' => 'int',
        'numNodes' => 'int',
        'numChannels' => 'int',
        'totalNetworkCapacity' => 'string',
        'avgChannelSize' => 'double',
        'minChannelSize' => 'string',
        'maxChannelSize' => 'string',
        'medianChannelSizeSat' => 'string',
        'numZombieChans' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'graphDiameter' => 'int64',
        'avgOutDegree' => 'double',
        'maxOutDegree' => 'int64',
        'numNodes' => 'int64',
        'numChannels' => 'int64',
        'totalNetworkCapacity' => 'int64',
        'avgChannelSize' => 'double',
        'minChannelSize' => 'int64',
        'maxChannelSize' => 'int64',
        'medianChannelSizeSat' => 'int64',
        'numZombieChans' => 'uint64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'graphDiameter' => 'graph_diameter',
        'avgOutDegree' => 'avg_out_degree',
        'maxOutDegree' => 'max_out_degree',
        'numNodes' => 'num_nodes',
        'numChannels' => 'num_channels',
        'totalNetworkCapacity' => 'total_network_capacity',
        'avgChannelSize' => 'avg_channel_size',
        'minChannelSize' => 'min_channel_size',
        'maxChannelSize' => 'max_channel_size',
        'medianChannelSizeSat' => 'median_channel_size_sat',
        'numZombieChans' => 'num_zombie_chans'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'graphDiameter' => 'setGraphDiameter',
        'avgOutDegree' => 'setAvgOutDegree',
        'maxOutDegree' => 'setMaxOutDegree',
        'numNodes' => 'setNumNodes',
        'numChannels' => 'setNumChannels',
        'totalNetworkCapacity' => 'setTotalNetworkCapacity',
        'avgChannelSize' => 'setAvgChannelSize',
        'minChannelSize' => 'setMinChannelSize',
        'maxChannelSize' => 'setMaxChannelSize',
        'medianChannelSizeSat' => 'setMedianChannelSizeSat',
        'numZombieChans' => 'setNumZombieChans'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'graphDiameter' => 'getGraphDiameter',
        'avgOutDegree' => 'getAvgOutDegree',
        'maxOutDegree' => 'getMaxOutDegree',
        'numNodes' => 'getNumNodes',
        'numChannels' => 'getNumChannels',
        'totalNetworkCapacity' => 'getTotalNetworkCapacity',
        'avgChannelSize' => 'getAvgChannelSize',
        'minChannelSize' => 'getMinChannelSize',
        'maxChannelSize' => 'getMaxChannelSize',
        'medianChannelSizeSat' => 'getMedianChannelSizeSat',
        'numZombieChans' => 'getNumZombieChans'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['graphDiameter'] = isset($data['graphDiameter']) ? $data['graphDiameter'] : null;
        $this->container['avgOutDegree'] = isset($data['avgOutDegree']) ? $data['avgOutDegree'] : null;
        $this->container['maxOutDegree'] = isset($data['maxOutDegree']) ? $data['maxOutDegree'] : null;
        $this->container['numNodes'] = isset($data['numNodes']) ? $data['numNodes'] : null;
        $this->container['numChannels'] = isset($data['numChannels']) ? $data['numChannels'] : null;
        $this->container['totalNetworkCapacity'] = isset($data['totalNetworkCapacity']) ? $data['totalNetworkCapacity'] : null;
        $this->container['avgChannelSize'] = isset($data['avgChannelSize']) ? $data['avgChannelSize'] : null;
        $this->container['minChannelSize'] = isset($data['minChannelSize']) ? $data['minChannelSize'] : null;
        $this->container['maxChannelSize'] = isset($data['maxChannelSize']) ? $data['maxChannelSize'] : null;
        $this->container['medianChannelSizeSat'] = isset($data['medianChannelSizeSat']) ? $data['medianChannelSizeSat'] : null;
        $this->container['numZombieChans'] = isset($data['numZombieChans']) ? $data['numZombieChans'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets graphDiameter
     *
     * @return int
     */
    public function getGraphDiameter()
    {
        return $this->container['graphDiameter'];
    }

    /**
     * Sets graphDiameter
     *
     * @param int $graphDiameter graphDiameter
     *
     * @return $this
     */
    public function setGraphDiameter($graphDiameter)
    {
        $this->container['graphDiameter'] = $graphDiameter;

        return $this;
    }

    /**
     * Gets avgOutDegree
     *
     * @return double
     */
    public function getAvgOutDegree()
    {
        return $this->container['avgOutDegree'];
    }

    /**
     * Sets avgOutDegree
     *
     * @param double $avgOutDegree avgOutDegree
     *
     * @return $this
     */
    public function setAvgOutDegree($avgOutDegree)
    {
        $this->container['avgOutDegree'] = $avgOutDegree;

        return $this;
    }

    /**
     * Gets maxOutDegree
     *
     * @return int
     */
    public function getMaxOutDegree()
    {
        return $this->container['maxOutDegree'];
    }

    /**
     * Sets maxOutDegree
     *
     * @param int $maxOutDegree maxOutDegree
     *
     * @return $this
     */
    public function setMaxOutDegree($maxOutDegree)
    {
        $this->container['maxOutDegree'] = $maxOutDegree;

        return $this;
    }

    /**
     * Gets numNodes
     *
     * @return int
     */
    public function getNumNodes()
    {
        return $this->container['numNodes'];
    }

    /**
     * Sets numNodes
     *
     * @param int $numNodes numNodes
     *
     * @return $this
     */
    public function setNumNodes($numNodes)
    {
        $this->container['numNodes'] = $numNodes;

        return $this;
    }

    /**
     * Gets numChannels
     *
     * @return int
     */
    public function getNumChannels()
    {
        return $this->container['numChannels'];
    }

    /**
     * Sets numChannels
     *
     * @param int $numChannels numChannels
     *
     * @return $this
     */
    public function setNumChannels($numChannels)
    {
        $this->container['numChannels'] = $numChannels;

        return $this;
    }

    /**
     * Gets totalNetworkCapacity
     *
     * @return string
     */
    public function getTotalNetworkCapacity()
    {
        return $this->container['totalNetworkCapacity'];
    }

    /**
     * Sets totalNetworkCapacity
     *
     * @param string $totalNetworkCapacity totalNetworkCapacity
     *
     * @return $this
     */
    public function setTotalNetworkCapacity($totalNetworkCapacity)
    {
        $this->container['totalNetworkCapacity'] = $totalNetworkCapacity;

        return $this;
    }

    /**
     * Gets avgChannelSize
     *
     * @return double
     */
    public function getAvgChannelSize()
    {
        return $this->container['avgChannelSize'];
    }

    /**
     * Sets avgChannelSize
     *
     * @param double $avgChannelSize avgChannelSize
     *
     * @return $this
     */
    public function setAvgChannelSize($avgChannelSize)
    {
        $this->container['avgChannelSize'] = $avgChannelSize;

        return $this;
    }

    /**
     * Gets minChannelSize
     *
     * @return string
     */
    public function getMinChannelSize()
    {
        return $this->container['minChannelSize'];
    }

    /**
     * Sets minChannelSize
     *
     * @param string $minChannelSize minChannelSize
     *
     * @return $this
     */
    public function setMinChannelSize($minChannelSize)
    {
        $this->container['minChannelSize'] = $minChannelSize;

        return $this;
    }

    /**
     * Gets maxChannelSize
     *
     * @return string
     */
    public function getMaxChannelSize()
    {
        return $this->container['maxChannelSize'];
    }

    /**
     * Sets maxChannelSize
     *
     * @param string $maxChannelSize maxChannelSize
     *
     * @return $this
     */
    public function setMaxChannelSize($maxChannelSize)
    {
        $this->container['maxChannelSize'] = $maxChannelSize;

        return $this;
    }

    /**
     * Gets medianChannelSizeSat
     *
     * @return string
     */
    public function getMedianChannelSizeSat()
    {
        return $this->container['medianChannelSizeSat'];
    }

    /**
     * Sets medianChannelSizeSat
     *
     * @param string $medianChannelSizeSat medianChannelSizeSat
     *
     * @return $this
     */
    public function setMedianChannelSizeSat($medianChannelSizeSat)
    {
        $this->container['medianChannelSizeSat'] = $medianChannelSizeSat;

        return $this;
    }

    /**
     * Gets numZombieChans
     *
     * @return string
     */
    public function getNumZombieChans()
    {
        return $this->container['numZombieChans'];
    }

    /**
     * Sets numZombieChans
     *
     * @param string $numZombieChans The number of edges marked as zombies.
     *
     * @return $this
     */
    public function setNumZombieChans($numZombieChans)
    {
        $this->container['numZombieChans'] = $numZombieChans;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


