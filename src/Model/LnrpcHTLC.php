<?php
/**
 * LnrpcHTLC
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lnd\Rest\Model;

use \ArrayAccess;
use \Lnd\Rest\ObjectSerializer;

/**
 * LnrpcHTLC Class Doc Comment
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LnrpcHTLC implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lnrpcHTLC';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'incoming' => 'bool',
        'amount' => 'string',
        'hashLock' => 'string',
        'expirationHeight' => 'int',
        'htlcIndex' => 'string',
        'forwardingChannel' => 'string',
        'forwardingHtlcIndex' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'incoming' => 'boolean',
        'amount' => 'int64',
        'hashLock' => 'byte',
        'expirationHeight' => 'int64',
        'htlcIndex' => 'uint64',
        'forwardingChannel' => 'uint64',
        'forwardingHtlcIndex' => 'uint64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'incoming' => 'incoming',
        'amount' => 'amount',
        'hashLock' => 'hash_lock',
        'expirationHeight' => 'expiration_height',
        'htlcIndex' => 'htlc_index',
        'forwardingChannel' => 'forwarding_channel',
        'forwardingHtlcIndex' => 'forwarding_htlc_index'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'incoming' => 'setIncoming',
        'amount' => 'setAmount',
        'hashLock' => 'setHashLock',
        'expirationHeight' => 'setExpirationHeight',
        'htlcIndex' => 'setHtlcIndex',
        'forwardingChannel' => 'setForwardingChannel',
        'forwardingHtlcIndex' => 'setForwardingHtlcIndex'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'incoming' => 'getIncoming',
        'amount' => 'getAmount',
        'hashLock' => 'getHashLock',
        'expirationHeight' => 'getExpirationHeight',
        'htlcIndex' => 'getHtlcIndex',
        'forwardingChannel' => 'getForwardingChannel',
        'forwardingHtlcIndex' => 'getForwardingHtlcIndex'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['incoming'] = isset($data['incoming']) ? $data['incoming'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['hashLock'] = isset($data['hashLock']) ? $data['hashLock'] : null;
        $this->container['expirationHeight'] = isset($data['expirationHeight']) ? $data['expirationHeight'] : null;
        $this->container['htlcIndex'] = isset($data['htlcIndex']) ? $data['htlcIndex'] : null;
        $this->container['forwardingChannel'] = isset($data['forwardingChannel']) ? $data['forwardingChannel'] : null;
        $this->container['forwardingHtlcIndex'] = isset($data['forwardingHtlcIndex']) ? $data['forwardingHtlcIndex'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['hashLock']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['hashLock'])) {
            $invalidProperties[] = "invalid value for 'hashLock', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets incoming
     *
     * @return bool
     */
    public function getIncoming()
    {
        return $this->container['incoming'];
    }

    /**
     * Sets incoming
     *
     * @param bool $incoming incoming
     *
     * @return $this
     */
    public function setIncoming($incoming)
    {
        $this->container['incoming'] = $incoming;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets hashLock
     *
     * @return string
     */
    public function getHashLock()
    {
        return $this->container['hashLock'];
    }

    /**
     * Sets hashLock
     *
     * @param string $hashLock hashLock
     *
     * @return $this
     */
    public function setHashLock($hashLock)
    {

        if (!is_null($hashLock) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $hashLock))) {
            throw new \InvalidArgumentException("invalid value for $hashLock when calling LnrpcHTLC., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['hashLock'] = $hashLock;

        return $this;
    }

    /**
     * Gets expirationHeight
     *
     * @return int
     */
    public function getExpirationHeight()
    {
        return $this->container['expirationHeight'];
    }

    /**
     * Sets expirationHeight
     *
     * @param int $expirationHeight expirationHeight
     *
     * @return $this
     */
    public function setExpirationHeight($expirationHeight)
    {
        $this->container['expirationHeight'] = $expirationHeight;

        return $this;
    }

    /**
     * Gets htlcIndex
     *
     * @return string
     */
    public function getHtlcIndex()
    {
        return $this->container['htlcIndex'];
    }

    /**
     * Sets htlcIndex
     *
     * @param string $htlcIndex Index identifying the htlc on the channel.
     *
     * @return $this
     */
    public function setHtlcIndex($htlcIndex)
    {
        $this->container['htlcIndex'] = $htlcIndex;

        return $this;
    }

    /**
     * Gets forwardingChannel
     *
     * @return string
     */
    public function getForwardingChannel()
    {
        return $this->container['forwardingChannel'];
    }

    /**
     * Sets forwardingChannel
     *
     * @param string $forwardingChannel If this HTLC is involved in a forwarding operation, this field indicates the forwarding channel. For an outgoing htlc, it is the incoming channel. For an incoming htlc, it is the outgoing channel. When the htlc originates from this node or this node is the final destination, forwarding_channel will be zero. The forwarding channel will also be zero for htlcs that need to be forwarded but don't have a forwarding decision persisted yet.
     *
     * @return $this
     */
    public function setForwardingChannel($forwardingChannel)
    {
        $this->container['forwardingChannel'] = $forwardingChannel;

        return $this;
    }

    /**
     * Gets forwardingHtlcIndex
     *
     * @return string
     */
    public function getForwardingHtlcIndex()
    {
        return $this->container['forwardingHtlcIndex'];
    }

    /**
     * Sets forwardingHtlcIndex
     *
     * @param string $forwardingHtlcIndex Index identifying the htlc on the forwarding channel.
     *
     * @return $this
     */
    public function setForwardingHtlcIndex($forwardingHtlcIndex)
    {
        $this->container['forwardingHtlcIndex'] = $forwardingHtlcIndex;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


