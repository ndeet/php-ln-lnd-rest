<?php
/**
 * LnrpcChannelEdge
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lnd\Rest\Model;

use \ArrayAccess;
use \Lnd\Rest\ObjectSerializer;

/**
 * LnrpcChannelEdge Class Doc Comment
 *
 * @category Class
 * @description * A fully authenticated channel along with all its unique attributes. Once an authenticated channel announcement has been processed on the network, then an instance of ChannelEdgeInfo encapsulating the channels attributes is stored. The other portions relevant to routing policy of a channel are stored within a ChannelEdgePolicy for each direction of the channel.
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LnrpcChannelEdge implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lnrpcChannelEdge';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'channelId' => 'string',
        'chanPoint' => 'string',
        'lastUpdate' => 'int',
        'node1Pub' => 'string',
        'node2Pub' => 'string',
        'capacity' => 'string',
        'node1Policy' => '\Lnd\Rest\Model\LnrpcRoutingPolicy',
        'node2Policy' => '\Lnd\Rest\Model\LnrpcRoutingPolicy'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'channelId' => 'uint64',
        'chanPoint' => null,
        'lastUpdate' => 'int64',
        'node1Pub' => null,
        'node2Pub' => null,
        'capacity' => 'int64',
        'node1Policy' => null,
        'node2Policy' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channelId' => 'channel_id',
        'chanPoint' => 'chan_point',
        'lastUpdate' => 'last_update',
        'node1Pub' => 'node1_pub',
        'node2Pub' => 'node2_pub',
        'capacity' => 'capacity',
        'node1Policy' => 'node1_policy',
        'node2Policy' => 'node2_policy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channelId' => 'setChannelId',
        'chanPoint' => 'setChanPoint',
        'lastUpdate' => 'setLastUpdate',
        'node1Pub' => 'setNode1Pub',
        'node2Pub' => 'setNode2Pub',
        'capacity' => 'setCapacity',
        'node1Policy' => 'setNode1Policy',
        'node2Policy' => 'setNode2Policy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channelId' => 'getChannelId',
        'chanPoint' => 'getChanPoint',
        'lastUpdate' => 'getLastUpdate',
        'node1Pub' => 'getNode1Pub',
        'node2Pub' => 'getNode2Pub',
        'capacity' => 'getCapacity',
        'node1Policy' => 'getNode1Policy',
        'node2Policy' => 'getNode2Policy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channelId'] = isset($data['channelId']) ? $data['channelId'] : null;
        $this->container['chanPoint'] = isset($data['chanPoint']) ? $data['chanPoint'] : null;
        $this->container['lastUpdate'] = isset($data['lastUpdate']) ? $data['lastUpdate'] : null;
        $this->container['node1Pub'] = isset($data['node1Pub']) ? $data['node1Pub'] : null;
        $this->container['node2Pub'] = isset($data['node2Pub']) ? $data['node2Pub'] : null;
        $this->container['capacity'] = isset($data['capacity']) ? $data['capacity'] : null;
        $this->container['node1Policy'] = isset($data['node1Policy']) ? $data['node1Policy'] : null;
        $this->container['node2Policy'] = isset($data['node2Policy']) ? $data['node2Policy'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channelId
     *
     * @return string
     */
    public function getChannelId()
    {
        return $this->container['channelId'];
    }

    /**
     * Sets channelId
     *
     * @param string $channelId * The unique channel ID for the channel. The first 3 bytes are the block height, the next 3 the index within the block, and the last 2 bytes are the output index for the channel.
     *
     * @return $this
     */
    public function setChannelId($channelId)
    {
        $this->container['channelId'] = $channelId;

        return $this;
    }

    /**
     * Gets chanPoint
     *
     * @return string
     */
    public function getChanPoint()
    {
        return $this->container['chanPoint'];
    }

    /**
     * Sets chanPoint
     *
     * @param string $chanPoint chanPoint
     *
     * @return $this
     */
    public function setChanPoint($chanPoint)
    {
        $this->container['chanPoint'] = $chanPoint;

        return $this;
    }

    /**
     * Gets lastUpdate
     *
     * @return int
     */
    public function getLastUpdate()
    {
        return $this->container['lastUpdate'];
    }

    /**
     * Sets lastUpdate
     *
     * @param int $lastUpdate lastUpdate
     *
     * @return $this
     */
    public function setLastUpdate($lastUpdate)
    {
        $this->container['lastUpdate'] = $lastUpdate;

        return $this;
    }

    /**
     * Gets node1Pub
     *
     * @return string
     */
    public function getNode1Pub()
    {
        return $this->container['node1Pub'];
    }

    /**
     * Sets node1Pub
     *
     * @param string $node1Pub node1Pub
     *
     * @return $this
     */
    public function setNode1Pub($node1Pub)
    {
        $this->container['node1Pub'] = $node1Pub;

        return $this;
    }

    /**
     * Gets node2Pub
     *
     * @return string
     */
    public function getNode2Pub()
    {
        return $this->container['node2Pub'];
    }

    /**
     * Sets node2Pub
     *
     * @param string $node2Pub node2Pub
     *
     * @return $this
     */
    public function setNode2Pub($node2Pub)
    {
        $this->container['node2Pub'] = $node2Pub;

        return $this;
    }

    /**
     * Gets capacity
     *
     * @return string
     */
    public function getCapacity()
    {
        return $this->container['capacity'];
    }

    /**
     * Sets capacity
     *
     * @param string $capacity capacity
     *
     * @return $this
     */
    public function setCapacity($capacity)
    {
        $this->container['capacity'] = $capacity;

        return $this;
    }

    /**
     * Gets node1Policy
     *
     * @return \Lnd\Rest\Model\LnrpcRoutingPolicy
     */
    public function getNode1Policy()
    {
        return $this->container['node1Policy'];
    }

    /**
     * Sets node1Policy
     *
     * @param \Lnd\Rest\Model\LnrpcRoutingPolicy $node1Policy node1Policy
     *
     * @return $this
     */
    public function setNode1Policy($node1Policy)
    {
        $this->container['node1Policy'] = $node1Policy;

        return $this;
    }

    /**
     * Gets node2Policy
     *
     * @return \Lnd\Rest\Model\LnrpcRoutingPolicy
     */
    public function getNode2Policy()
    {
        return $this->container['node2Policy'];
    }

    /**
     * Sets node2Policy
     *
     * @param \Lnd\Rest\Model\LnrpcRoutingPolicy $node2Policy node2Policy
     *
     * @return $this
     */
    public function setNode2Policy($node2Policy)
    {
        $this->container['node2Policy'] = $node2Policy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


