<?php
/**
 * LnrpcHopHint
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lnd\Rest\Model;

use \ArrayAccess;
use \Lnd\Rest\ObjectSerializer;

/**
 * LnrpcHopHint Class Doc Comment
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LnrpcHopHint implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lnrpcHopHint';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'nodeId' => 'string',
        'chanId' => 'string',
        'feeBaseMsat' => 'int',
        'feeProportionalMillionths' => 'int',
        'cltvExpiryDelta' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'nodeId' => null,
        'chanId' => 'uint64',
        'feeBaseMsat' => 'int64',
        'feeProportionalMillionths' => 'int64',
        'cltvExpiryDelta' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nodeId' => 'node_id',
        'chanId' => 'chan_id',
        'feeBaseMsat' => 'fee_base_msat',
        'feeProportionalMillionths' => 'fee_proportional_millionths',
        'cltvExpiryDelta' => 'cltv_expiry_delta'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nodeId' => 'setNodeId',
        'chanId' => 'setChanId',
        'feeBaseMsat' => 'setFeeBaseMsat',
        'feeProportionalMillionths' => 'setFeeProportionalMillionths',
        'cltvExpiryDelta' => 'setCltvExpiryDelta'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nodeId' => 'getNodeId',
        'chanId' => 'getChanId',
        'feeBaseMsat' => 'getFeeBaseMsat',
        'feeProportionalMillionths' => 'getFeeProportionalMillionths',
        'cltvExpiryDelta' => 'getCltvExpiryDelta'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nodeId'] = isset($data['nodeId']) ? $data['nodeId'] : null;
        $this->container['chanId'] = isset($data['chanId']) ? $data['chanId'] : null;
        $this->container['feeBaseMsat'] = isset($data['feeBaseMsat']) ? $data['feeBaseMsat'] : null;
        $this->container['feeProportionalMillionths'] = isset($data['feeProportionalMillionths']) ? $data['feeProportionalMillionths'] : null;
        $this->container['cltvExpiryDelta'] = isset($data['cltvExpiryDelta']) ? $data['cltvExpiryDelta'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nodeId
     *
     * @return string
     */
    public function getNodeId()
    {
        return $this->container['nodeId'];
    }

    /**
     * Sets nodeId
     *
     * @param string $nodeId / The public key of the node at the start of the channel.
     *
     * @return $this
     */
    public function setNodeId($nodeId)
    {
        $this->container['nodeId'] = $nodeId;

        return $this;
    }

    /**
     * Gets chanId
     *
     * @return string
     */
    public function getChanId()
    {
        return $this->container['chanId'];
    }

    /**
     * Sets chanId
     *
     * @param string $chanId / The unique identifier of the channel.
     *
     * @return $this
     */
    public function setChanId($chanId)
    {
        $this->container['chanId'] = $chanId;

        return $this;
    }

    /**
     * Gets feeBaseMsat
     *
     * @return int
     */
    public function getFeeBaseMsat()
    {
        return $this->container['feeBaseMsat'];
    }

    /**
     * Sets feeBaseMsat
     *
     * @param int $feeBaseMsat / The base fee of the channel denominated in millisatoshis.
     *
     * @return $this
     */
    public function setFeeBaseMsat($feeBaseMsat)
    {
        $this->container['feeBaseMsat'] = $feeBaseMsat;

        return $this;
    }

    /**
     * Gets feeProportionalMillionths
     *
     * @return int
     */
    public function getFeeProportionalMillionths()
    {
        return $this->container['feeProportionalMillionths'];
    }

    /**
     * Sets feeProportionalMillionths
     *
     * @param int $feeProportionalMillionths * The fee rate of the channel for sending one satoshi across it denominated in millionths of a satoshi.
     *
     * @return $this
     */
    public function setFeeProportionalMillionths($feeProportionalMillionths)
    {
        $this->container['feeProportionalMillionths'] = $feeProportionalMillionths;

        return $this;
    }

    /**
     * Gets cltvExpiryDelta
     *
     * @return int
     */
    public function getCltvExpiryDelta()
    {
        return $this->container['cltvExpiryDelta'];
    }

    /**
     * Sets cltvExpiryDelta
     *
     * @param int $cltvExpiryDelta / The time-lock delta of the channel.
     *
     * @return $this
     */
    public function setCltvExpiryDelta($cltvExpiryDelta)
    {
        $this->container['cltvExpiryDelta'] = $cltvExpiryDelta;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


