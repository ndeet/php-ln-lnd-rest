<?php
/**
 * FailureFailureCode
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lnd\Rest\Model;
use \Lnd\Rest\ObjectSerializer;

/**
 * FailureFailureCode Class Doc Comment
 *
 * @category Class
 * @description - RESERVED: The numbers assigned in this enumeration match the failure codes as defined in BOLT #4. Because protobuf 3 requires enums to start with 0, a RESERVED value is added.  - INTERNAL_FAILURE: An internal error occurred.  - UNKNOWN_FAILURE: The error source is known, but the failure itself couldn&#39;t be decoded.  - UNREADABLE_FAILURE: An unreadable failure result is returned if the received failure message cannot be decrypted. In that case the error source is unknown.
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FailureFailureCode
{
    /**
     * Possible values of this enum
     */
    const RESERVED = 'RESERVED';
    const INCORRECT_OR_UNKNOWN_PAYMENT_DETAILS = 'INCORRECT_OR_UNKNOWN_PAYMENT_DETAILS';
    const INCORRECT_PAYMENT_AMOUNT = 'INCORRECT_PAYMENT_AMOUNT';
    const FINAL_INCORRECT_CLTV_EXPIRY = 'FINAL_INCORRECT_CLTV_EXPIRY';
    const FINAL_INCORRECT_HTLC_AMOUNT = 'FINAL_INCORRECT_HTLC_AMOUNT';
    const FINAL_EXPIRY_TOO_SOON = 'FINAL_EXPIRY_TOO_SOON';
    const INVALID_REALM = 'INVALID_REALM';
    const EXPIRY_TOO_SOON = 'EXPIRY_TOO_SOON';
    const INVALID_ONION_VERSION = 'INVALID_ONION_VERSION';
    const INVALID_ONION_HMAC = 'INVALID_ONION_HMAC';
    const INVALID_ONION_KEY = 'INVALID_ONION_KEY';
    const AMOUNT_BELOW_MINIMUM = 'AMOUNT_BELOW_MINIMUM';
    const FEE_INSUFFICIENT = 'FEE_INSUFFICIENT';
    const INCORRECT_CLTV_EXPIRY = 'INCORRECT_CLTV_EXPIRY';
    const CHANNEL_DISABLED = 'CHANNEL_DISABLED';
    const TEMPORARY_CHANNEL_FAILURE = 'TEMPORARY_CHANNEL_FAILURE';
    const REQUIRED_NODE_FEATURE_MISSING = 'REQUIRED_NODE_FEATURE_MISSING';
    const REQUIRED_CHANNEL_FEATURE_MISSING = 'REQUIRED_CHANNEL_FEATURE_MISSING';
    const UNKNOWN_NEXT_PEER = 'UNKNOWN_NEXT_PEER';
    const TEMPORARY_NODE_FAILURE = 'TEMPORARY_NODE_FAILURE';
    const PERMANENT_NODE_FAILURE = 'PERMANENT_NODE_FAILURE';
    const PERMANENT_CHANNEL_FAILURE = 'PERMANENT_CHANNEL_FAILURE';
    const EXPIRY_TOO_FAR = 'EXPIRY_TOO_FAR';
    const MPP_TIMEOUT = 'MPP_TIMEOUT';
    const INVALID_ONION_PAYLOAD = 'INVALID_ONION_PAYLOAD';
    const INTERNAL_FAILURE = 'INTERNAL_FAILURE';
    const UNKNOWN_FAILURE = 'UNKNOWN_FAILURE';
    const UNREADABLE_FAILURE = 'UNREADABLE_FAILURE';
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::RESERVED,
            self::INCORRECT_OR_UNKNOWN_PAYMENT_DETAILS,
            self::INCORRECT_PAYMENT_AMOUNT,
            self::FINAL_INCORRECT_CLTV_EXPIRY,
            self::FINAL_INCORRECT_HTLC_AMOUNT,
            self::FINAL_EXPIRY_TOO_SOON,
            self::INVALID_REALM,
            self::EXPIRY_TOO_SOON,
            self::INVALID_ONION_VERSION,
            self::INVALID_ONION_HMAC,
            self::INVALID_ONION_KEY,
            self::AMOUNT_BELOW_MINIMUM,
            self::FEE_INSUFFICIENT,
            self::INCORRECT_CLTV_EXPIRY,
            self::CHANNEL_DISABLED,
            self::TEMPORARY_CHANNEL_FAILURE,
            self::REQUIRED_NODE_FEATURE_MISSING,
            self::REQUIRED_CHANNEL_FEATURE_MISSING,
            self::UNKNOWN_NEXT_PEER,
            self::TEMPORARY_NODE_FAILURE,
            self::PERMANENT_NODE_FAILURE,
            self::PERMANENT_CHANNEL_FAILURE,
            self::EXPIRY_TOO_FAR,
            self::MPP_TIMEOUT,
            self::INVALID_ONION_PAYLOAD,
            self::INTERNAL_FAILURE,
            self::UNKNOWN_FAILURE,
            self::UNREADABLE_FAILURE,
        ];
    }
}


