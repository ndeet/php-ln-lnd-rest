<?php
/**
 * LnrpcPayReq
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lnd\Rest\Model;

use \ArrayAccess;
use \Lnd\Rest\ObjectSerializer;

/**
 * LnrpcPayReq Class Doc Comment
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LnrpcPayReq implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lnrpcPayReq';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'destination' => 'string',
        'paymentHash' => 'string',
        'numSatoshis' => 'string',
        'timestamp' => 'string',
        'expiry' => 'string',
        'description' => 'string',
        'descriptionHash' => 'string',
        'fallbackAddr' => 'string',
        'cltvExpiry' => 'string',
        'routeHints' => '\Lnd\Rest\Model\LnrpcRouteHint[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'destination' => null,
        'paymentHash' => null,
        'numSatoshis' => 'int64',
        'timestamp' => 'int64',
        'expiry' => 'int64',
        'description' => null,
        'descriptionHash' => null,
        'fallbackAddr' => null,
        'cltvExpiry' => 'int64',
        'routeHints' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'destination' => 'destination',
        'paymentHash' => 'payment_hash',
        'numSatoshis' => 'num_satoshis',
        'timestamp' => 'timestamp',
        'expiry' => 'expiry',
        'description' => 'description',
        'descriptionHash' => 'description_hash',
        'fallbackAddr' => 'fallback_addr',
        'cltvExpiry' => 'cltv_expiry',
        'routeHints' => 'route_hints'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'destination' => 'setDestination',
        'paymentHash' => 'setPaymentHash',
        'numSatoshis' => 'setNumSatoshis',
        'timestamp' => 'setTimestamp',
        'expiry' => 'setExpiry',
        'description' => 'setDescription',
        'descriptionHash' => 'setDescriptionHash',
        'fallbackAddr' => 'setFallbackAddr',
        'cltvExpiry' => 'setCltvExpiry',
        'routeHints' => 'setRouteHints'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'destination' => 'getDestination',
        'paymentHash' => 'getPaymentHash',
        'numSatoshis' => 'getNumSatoshis',
        'timestamp' => 'getTimestamp',
        'expiry' => 'getExpiry',
        'description' => 'getDescription',
        'descriptionHash' => 'getDescriptionHash',
        'fallbackAddr' => 'getFallbackAddr',
        'cltvExpiry' => 'getCltvExpiry',
        'routeHints' => 'getRouteHints'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['destination'] = isset($data['destination']) ? $data['destination'] : null;
        $this->container['paymentHash'] = isset($data['paymentHash']) ? $data['paymentHash'] : null;
        $this->container['numSatoshis'] = isset($data['numSatoshis']) ? $data['numSatoshis'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['expiry'] = isset($data['expiry']) ? $data['expiry'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['descriptionHash'] = isset($data['descriptionHash']) ? $data['descriptionHash'] : null;
        $this->container['fallbackAddr'] = isset($data['fallbackAddr']) ? $data['fallbackAddr'] : null;
        $this->container['cltvExpiry'] = isset($data['cltvExpiry']) ? $data['cltvExpiry'] : null;
        $this->container['routeHints'] = isset($data['routeHints']) ? $data['routeHints'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets destination
     *
     * @return string
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param string $destination destination
     *
     * @return $this
     */
    public function setDestination($destination)
    {
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets paymentHash
     *
     * @return string
     */
    public function getPaymentHash()
    {
        return $this->container['paymentHash'];
    }

    /**
     * Sets paymentHash
     *
     * @param string $paymentHash paymentHash
     *
     * @return $this
     */
    public function setPaymentHash($paymentHash)
    {
        $this->container['paymentHash'] = $paymentHash;

        return $this;
    }

    /**
     * Gets numSatoshis
     *
     * @return string
     */
    public function getNumSatoshis()
    {
        return $this->container['numSatoshis'];
    }

    /**
     * Sets numSatoshis
     *
     * @param string $numSatoshis numSatoshis
     *
     * @return $this
     */
    public function setNumSatoshis($numSatoshis)
    {
        $this->container['numSatoshis'] = $numSatoshis;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets expiry
     *
     * @return string
     */
    public function getExpiry()
    {
        return $this->container['expiry'];
    }

    /**
     * Sets expiry
     *
     * @param string $expiry expiry
     *
     * @return $this
     */
    public function setExpiry($expiry)
    {
        $this->container['expiry'] = $expiry;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets descriptionHash
     *
     * @return string
     */
    public function getDescriptionHash()
    {
        return $this->container['descriptionHash'];
    }

    /**
     * Sets descriptionHash
     *
     * @param string $descriptionHash descriptionHash
     *
     * @return $this
     */
    public function setDescriptionHash($descriptionHash)
    {
        $this->container['descriptionHash'] = $descriptionHash;

        return $this;
    }

    /**
     * Gets fallbackAddr
     *
     * @return string
     */
    public function getFallbackAddr()
    {
        return $this->container['fallbackAddr'];
    }

    /**
     * Sets fallbackAddr
     *
     * @param string $fallbackAddr fallbackAddr
     *
     * @return $this
     */
    public function setFallbackAddr($fallbackAddr)
    {
        $this->container['fallbackAddr'] = $fallbackAddr;

        return $this;
    }

    /**
     * Gets cltvExpiry
     *
     * @return string
     */
    public function getCltvExpiry()
    {
        return $this->container['cltvExpiry'];
    }

    /**
     * Sets cltvExpiry
     *
     * @param string $cltvExpiry cltvExpiry
     *
     * @return $this
     */
    public function setCltvExpiry($cltvExpiry)
    {
        $this->container['cltvExpiry'] = $cltvExpiry;

        return $this;
    }

    /**
     * Gets routeHints
     *
     * @return \Lnd\Rest\Model\LnrpcRouteHint[]
     */
    public function getRouteHints()
    {
        return $this->container['routeHints'];
    }

    /**
     * Sets routeHints
     *
     * @param \Lnd\Rest\Model\LnrpcRouteHint[] $routeHints routeHints
     *
     * @return $this
     */
    public function setRouteHints($routeHints)
    {
        $this->container['routeHints'] = $routeHints;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


