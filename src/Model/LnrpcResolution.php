<?php
/**
 * LnrpcResolution
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lnd\Rest\Model;

use \ArrayAccess;
use \Lnd\Rest\ObjectSerializer;

/**
 * LnrpcResolution Class Doc Comment
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LnrpcResolution implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lnrpcResolution';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'resolutionType' => '\Lnd\Rest\Model\LnrpcResolutionType',
        'outcome' => '\Lnd\Rest\Model\LnrpcResolutionOutcome',
        'outpoint' => '\Lnd\Rest\Model\LnrpcOutPoint',
        'amountSat' => 'string',
        'sweepTxid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'resolutionType' => null,
        'outcome' => null,
        'outpoint' => null,
        'amountSat' => 'uint64',
        'sweepTxid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'resolutionType' => 'resolution_type',
        'outcome' => 'outcome',
        'outpoint' => 'outpoint',
        'amountSat' => 'amount_sat',
        'sweepTxid' => 'sweep_txid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'resolutionType' => 'setResolutionType',
        'outcome' => 'setOutcome',
        'outpoint' => 'setOutpoint',
        'amountSat' => 'setAmountSat',
        'sweepTxid' => 'setSweepTxid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'resolutionType' => 'getResolutionType',
        'outcome' => 'getOutcome',
        'outpoint' => 'getOutpoint',
        'amountSat' => 'getAmountSat',
        'sweepTxid' => 'getSweepTxid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['resolutionType'] = isset($data['resolutionType']) ? $data['resolutionType'] : null;
        $this->container['outcome'] = isset($data['outcome']) ? $data['outcome'] : null;
        $this->container['outpoint'] = isset($data['outpoint']) ? $data['outpoint'] : null;
        $this->container['amountSat'] = isset($data['amountSat']) ? $data['amountSat'] : null;
        $this->container['sweepTxid'] = isset($data['sweepTxid']) ? $data['sweepTxid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets resolutionType
     *
     * @return \Lnd\Rest\Model\LnrpcResolutionType
     */
    public function getResolutionType()
    {
        return $this->container['resolutionType'];
    }

    /**
     * Sets resolutionType
     *
     * @param \Lnd\Rest\Model\LnrpcResolutionType $resolutionType The type of output we are resolving.
     *
     * @return $this
     */
    public function setResolutionType($resolutionType)
    {
        $this->container['resolutionType'] = $resolutionType;

        return $this;
    }

    /**
     * Gets outcome
     *
     * @return \Lnd\Rest\Model\LnrpcResolutionOutcome
     */
    public function getOutcome()
    {
        return $this->container['outcome'];
    }

    /**
     * Sets outcome
     *
     * @param \Lnd\Rest\Model\LnrpcResolutionOutcome $outcome The outcome of our on chain action that resolved the outpoint.
     *
     * @return $this
     */
    public function setOutcome($outcome)
    {
        $this->container['outcome'] = $outcome;

        return $this;
    }

    /**
     * Gets outpoint
     *
     * @return \Lnd\Rest\Model\LnrpcOutPoint
     */
    public function getOutpoint()
    {
        return $this->container['outpoint'];
    }

    /**
     * Sets outpoint
     *
     * @param \Lnd\Rest\Model\LnrpcOutPoint $outpoint The outpoint that was spent by the resolution.
     *
     * @return $this
     */
    public function setOutpoint($outpoint)
    {
        $this->container['outpoint'] = $outpoint;

        return $this;
    }

    /**
     * Gets amountSat
     *
     * @return string
     */
    public function getAmountSat()
    {
        return $this->container['amountSat'];
    }

    /**
     * Sets amountSat
     *
     * @param string $amountSat The amount that was claimed by the resolution.
     *
     * @return $this
     */
    public function setAmountSat($amountSat)
    {
        $this->container['amountSat'] = $amountSat;

        return $this;
    }

    /**
     * Gets sweepTxid
     *
     * @return string
     */
    public function getSweepTxid()
    {
        return $this->container['sweepTxid'];
    }

    /**
     * Sets sweepTxid
     *
     * @param string $sweepTxid The hex-encoded transaction ID of the sweep transaction that spent the output.
     *
     * @return $this
     */
    public function setSweepTxid($sweepTxid)
    {
        $this->container['sweepTxid'] = $sweepTxid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


