<?php
/**
 * LnrpcInvoiceHTLC
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lnd\Rest\Model;

use \ArrayAccess;
use \Lnd\Rest\ObjectSerializer;

/**
 * LnrpcInvoiceHTLC Class Doc Comment
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LnrpcInvoiceHTLC implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lnrpcInvoiceHTLC';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'chanId' => 'string',
        'htlcIndex' => 'string',
        'amtMsat' => 'string',
        'acceptHeight' => 'int',
        'acceptTime' => 'string',
        'resolveTime' => 'string',
        'expiryHeight' => 'int',
        'state' => '\Lnd\Rest\Model\LnrpcInvoiceHTLCState'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'chanId' => 'uint64',
        'htlcIndex' => 'uint64',
        'amtMsat' => 'uint64',
        'acceptHeight' => 'int32',
        'acceptTime' => 'int64',
        'resolveTime' => 'int64',
        'expiryHeight' => 'int32',
        'state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'chanId' => 'chan_id',
        'htlcIndex' => 'htlc_index',
        'amtMsat' => 'amt_msat',
        'acceptHeight' => 'accept_height',
        'acceptTime' => 'accept_time',
        'resolveTime' => 'resolve_time',
        'expiryHeight' => 'expiry_height',
        'state' => 'state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'chanId' => 'setChanId',
        'htlcIndex' => 'setHtlcIndex',
        'amtMsat' => 'setAmtMsat',
        'acceptHeight' => 'setAcceptHeight',
        'acceptTime' => 'setAcceptTime',
        'resolveTime' => 'setResolveTime',
        'expiryHeight' => 'setExpiryHeight',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'chanId' => 'getChanId',
        'htlcIndex' => 'getHtlcIndex',
        'amtMsat' => 'getAmtMsat',
        'acceptHeight' => 'getAcceptHeight',
        'acceptTime' => 'getAcceptTime',
        'resolveTime' => 'getResolveTime',
        'expiryHeight' => 'getExpiryHeight',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['chanId'] = isset($data['chanId']) ? $data['chanId'] : null;
        $this->container['htlcIndex'] = isset($data['htlcIndex']) ? $data['htlcIndex'] : null;
        $this->container['amtMsat'] = isset($data['amtMsat']) ? $data['amtMsat'] : null;
        $this->container['acceptHeight'] = isset($data['acceptHeight']) ? $data['acceptHeight'] : null;
        $this->container['acceptTime'] = isset($data['acceptTime']) ? $data['acceptTime'] : null;
        $this->container['resolveTime'] = isset($data['resolveTime']) ? $data['resolveTime'] : null;
        $this->container['expiryHeight'] = isset($data['expiryHeight']) ? $data['expiryHeight'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets chanId
     *
     * @return string
     */
    public function getChanId()
    {
        return $this->container['chanId'];
    }

    /**
     * Sets chanId
     *
     * @param string $chanId / Short channel id over which the htlc was received.
     *
     * @return $this
     */
    public function setChanId($chanId)
    {
        $this->container['chanId'] = $chanId;

        return $this;
    }

    /**
     * Gets htlcIndex
     *
     * @return string
     */
    public function getHtlcIndex()
    {
        return $this->container['htlcIndex'];
    }

    /**
     * Sets htlcIndex
     *
     * @param string $htlcIndex / Index identifying the htlc on the channel.
     *
     * @return $this
     */
    public function setHtlcIndex($htlcIndex)
    {
        $this->container['htlcIndex'] = $htlcIndex;

        return $this;
    }

    /**
     * Gets amtMsat
     *
     * @return string
     */
    public function getAmtMsat()
    {
        return $this->container['amtMsat'];
    }

    /**
     * Sets amtMsat
     *
     * @param string $amtMsat / The amount of the htlc in msat.
     *
     * @return $this
     */
    public function setAmtMsat($amtMsat)
    {
        $this->container['amtMsat'] = $amtMsat;

        return $this;
    }

    /**
     * Gets acceptHeight
     *
     * @return int
     */
    public function getAcceptHeight()
    {
        return $this->container['acceptHeight'];
    }

    /**
     * Sets acceptHeight
     *
     * @param int $acceptHeight / Block height at which this htlc was accepted.
     *
     * @return $this
     */
    public function setAcceptHeight($acceptHeight)
    {
        $this->container['acceptHeight'] = $acceptHeight;

        return $this;
    }

    /**
     * Gets acceptTime
     *
     * @return string
     */
    public function getAcceptTime()
    {
        return $this->container['acceptTime'];
    }

    /**
     * Sets acceptTime
     *
     * @param string $acceptTime / Time at which this htlc was accepted.
     *
     * @return $this
     */
    public function setAcceptTime($acceptTime)
    {
        $this->container['acceptTime'] = $acceptTime;

        return $this;
    }

    /**
     * Gets resolveTime
     *
     * @return string
     */
    public function getResolveTime()
    {
        return $this->container['resolveTime'];
    }

    /**
     * Sets resolveTime
     *
     * @param string $resolveTime / Time at which this htlc was settled or canceled.
     *
     * @return $this
     */
    public function setResolveTime($resolveTime)
    {
        $this->container['resolveTime'] = $resolveTime;

        return $this;
    }

    /**
     * Gets expiryHeight
     *
     * @return int
     */
    public function getExpiryHeight()
    {
        return $this->container['expiryHeight'];
    }

    /**
     * Sets expiryHeight
     *
     * @param int $expiryHeight / Block height at which this htlc expires.
     *
     * @return $this
     */
    public function setExpiryHeight($expiryHeight)
    {
        $this->container['expiryHeight'] = $expiryHeight;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \Lnd\Rest\Model\LnrpcInvoiceHTLCState
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \Lnd\Rest\Model\LnrpcInvoiceHTLCState $state / Current state the htlc is in.
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


