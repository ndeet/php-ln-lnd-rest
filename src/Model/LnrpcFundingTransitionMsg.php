<?php
/**
 * LnrpcFundingTransitionMsg
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lnd\Rest\Model;

use \ArrayAccess;
use \Lnd\Rest\ObjectSerializer;

/**
 * LnrpcFundingTransitionMsg Class Doc Comment
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LnrpcFundingTransitionMsg implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lnrpcFundingTransitionMsg';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shimRegister' => '\Lnd\Rest\Model\LnrpcFundingShim',
        'shimCancel' => '\Lnd\Rest\Model\LnrpcFundingShimCancel',
        'psbtVerify' => '\Lnd\Rest\Model\LnrpcFundingPsbtVerify',
        'psbtFinalize' => '\Lnd\Rest\Model\LnrpcFundingPsbtFinalize'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shimRegister' => null,
        'shimCancel' => null,
        'psbtVerify' => null,
        'psbtFinalize' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shimRegister' => 'shim_register',
        'shimCancel' => 'shim_cancel',
        'psbtVerify' => 'psbt_verify',
        'psbtFinalize' => 'psbt_finalize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shimRegister' => 'setShimRegister',
        'shimCancel' => 'setShimCancel',
        'psbtVerify' => 'setPsbtVerify',
        'psbtFinalize' => 'setPsbtFinalize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shimRegister' => 'getShimRegister',
        'shimCancel' => 'getShimCancel',
        'psbtVerify' => 'getPsbtVerify',
        'psbtFinalize' => 'getPsbtFinalize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shimRegister'] = isset($data['shimRegister']) ? $data['shimRegister'] : null;
        $this->container['shimCancel'] = isset($data['shimCancel']) ? $data['shimCancel'] : null;
        $this->container['psbtVerify'] = isset($data['psbtVerify']) ? $data['psbtVerify'] : null;
        $this->container['psbtFinalize'] = isset($data['psbtFinalize']) ? $data['psbtFinalize'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shimRegister
     *
     * @return \Lnd\Rest\Model\LnrpcFundingShim
     */
    public function getShimRegister()
    {
        return $this->container['shimRegister'];
    }

    /**
     * Sets shimRegister
     *
     * @param \Lnd\Rest\Model\LnrpcFundingShim $shimRegister The funding shim to register. This should be used before any channel funding has began by the remote party, as it is intended as a preparatory step for the full channel funding.
     *
     * @return $this
     */
    public function setShimRegister($shimRegister)
    {
        $this->container['shimRegister'] = $shimRegister;

        return $this;
    }

    /**
     * Gets shimCancel
     *
     * @return \Lnd\Rest\Model\LnrpcFundingShimCancel
     */
    public function getShimCancel()
    {
        return $this->container['shimCancel'];
    }

    /**
     * Sets shimCancel
     *
     * @param \Lnd\Rest\Model\LnrpcFundingShimCancel $shimCancel Used to cancel an existing registered funding shim.
     *
     * @return $this
     */
    public function setShimCancel($shimCancel)
    {
        $this->container['shimCancel'] = $shimCancel;

        return $this;
    }

    /**
     * Gets psbtVerify
     *
     * @return \Lnd\Rest\Model\LnrpcFundingPsbtVerify
     */
    public function getPsbtVerify()
    {
        return $this->container['psbtVerify'];
    }

    /**
     * Sets psbtVerify
     *
     * @param \Lnd\Rest\Model\LnrpcFundingPsbtVerify $psbtVerify Used to continue a funding flow that was initiated to be executed through a PSBT. This step verifies that the PSBT contains the correct outputs to fund the channel.
     *
     * @return $this
     */
    public function setPsbtVerify($psbtVerify)
    {
        $this->container['psbtVerify'] = $psbtVerify;

        return $this;
    }

    /**
     * Gets psbtFinalize
     *
     * @return \Lnd\Rest\Model\LnrpcFundingPsbtFinalize
     */
    public function getPsbtFinalize()
    {
        return $this->container['psbtFinalize'];
    }

    /**
     * Sets psbtFinalize
     *
     * @param \Lnd\Rest\Model\LnrpcFundingPsbtFinalize $psbtFinalize Used to continue a funding flow that was initiated to be executed through a PSBT. This step finalizes the funded and signed PSBT, finishes negotiation with the peer and finally publishes the resulting funding transaction.
     *
     * @return $this
     */
    public function setPsbtFinalize($psbtFinalize)
    {
        $this->container['psbtFinalize'] = $psbtFinalize;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


