<?php
/**
 * PendingChannelsResponseCommitments
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lnd\Rest\Model;

use \ArrayAccess;
use \Lnd\Rest\ObjectSerializer;

/**
 * PendingChannelsResponseCommitments Class Doc Comment
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PendingChannelsResponseCommitments implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PendingChannelsResponseCommitments';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'localTxid' => 'string',
        'remoteTxid' => 'string',
        'remotePendingTxid' => 'string',
        'localCommitFeeSat' => 'string',
        'remoteCommitFeeSat' => 'string',
        'remotePendingCommitFeeSat' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'localTxid' => null,
        'remoteTxid' => null,
        'remotePendingTxid' => null,
        'localCommitFeeSat' => 'uint64',
        'remoteCommitFeeSat' => 'uint64',
        'remotePendingCommitFeeSat' => 'uint64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'localTxid' => 'local_txid',
        'remoteTxid' => 'remote_txid',
        'remotePendingTxid' => 'remote_pending_txid',
        'localCommitFeeSat' => 'local_commit_fee_sat',
        'remoteCommitFeeSat' => 'remote_commit_fee_sat',
        'remotePendingCommitFeeSat' => 'remote_pending_commit_fee_sat'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'localTxid' => 'setLocalTxid',
        'remoteTxid' => 'setRemoteTxid',
        'remotePendingTxid' => 'setRemotePendingTxid',
        'localCommitFeeSat' => 'setLocalCommitFeeSat',
        'remoteCommitFeeSat' => 'setRemoteCommitFeeSat',
        'remotePendingCommitFeeSat' => 'setRemotePendingCommitFeeSat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'localTxid' => 'getLocalTxid',
        'remoteTxid' => 'getRemoteTxid',
        'remotePendingTxid' => 'getRemotePendingTxid',
        'localCommitFeeSat' => 'getLocalCommitFeeSat',
        'remoteCommitFeeSat' => 'getRemoteCommitFeeSat',
        'remotePendingCommitFeeSat' => 'getRemotePendingCommitFeeSat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['localTxid'] = isset($data['localTxid']) ? $data['localTxid'] : null;
        $this->container['remoteTxid'] = isset($data['remoteTxid']) ? $data['remoteTxid'] : null;
        $this->container['remotePendingTxid'] = isset($data['remotePendingTxid']) ? $data['remotePendingTxid'] : null;
        $this->container['localCommitFeeSat'] = isset($data['localCommitFeeSat']) ? $data['localCommitFeeSat'] : null;
        $this->container['remoteCommitFeeSat'] = isset($data['remoteCommitFeeSat']) ? $data['remoteCommitFeeSat'] : null;
        $this->container['remotePendingCommitFeeSat'] = isset($data['remotePendingCommitFeeSat']) ? $data['remotePendingCommitFeeSat'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets localTxid
     *
     * @return string
     */
    public function getLocalTxid()
    {
        return $this->container['localTxid'];
    }

    /**
     * Sets localTxid
     *
     * @param string $localTxid Hash of the local version of the commitment tx.
     *
     * @return $this
     */
    public function setLocalTxid($localTxid)
    {
        $this->container['localTxid'] = $localTxid;

        return $this;
    }

    /**
     * Gets remoteTxid
     *
     * @return string
     */
    public function getRemoteTxid()
    {
        return $this->container['remoteTxid'];
    }

    /**
     * Sets remoteTxid
     *
     * @param string $remoteTxid Hash of the remote version of the commitment tx.
     *
     * @return $this
     */
    public function setRemoteTxid($remoteTxid)
    {
        $this->container['remoteTxid'] = $remoteTxid;

        return $this;
    }

    /**
     * Gets remotePendingTxid
     *
     * @return string
     */
    public function getRemotePendingTxid()
    {
        return $this->container['remotePendingTxid'];
    }

    /**
     * Sets remotePendingTxid
     *
     * @param string $remotePendingTxid Hash of the remote pending version of the commitment tx.
     *
     * @return $this
     */
    public function setRemotePendingTxid($remotePendingTxid)
    {
        $this->container['remotePendingTxid'] = $remotePendingTxid;

        return $this;
    }

    /**
     * Gets localCommitFeeSat
     *
     * @return string
     */
    public function getLocalCommitFeeSat()
    {
        return $this->container['localCommitFeeSat'];
    }

    /**
     * Sets localCommitFeeSat
     *
     * @param string $localCommitFeeSat The amount in satoshis calculated to be paid in fees for the local commitment.
     *
     * @return $this
     */
    public function setLocalCommitFeeSat($localCommitFeeSat)
    {
        $this->container['localCommitFeeSat'] = $localCommitFeeSat;

        return $this;
    }

    /**
     * Gets remoteCommitFeeSat
     *
     * @return string
     */
    public function getRemoteCommitFeeSat()
    {
        return $this->container['remoteCommitFeeSat'];
    }

    /**
     * Sets remoteCommitFeeSat
     *
     * @param string $remoteCommitFeeSat The amount in satoshis calculated to be paid in fees for the remote commitment.
     *
     * @return $this
     */
    public function setRemoteCommitFeeSat($remoteCommitFeeSat)
    {
        $this->container['remoteCommitFeeSat'] = $remoteCommitFeeSat;

        return $this;
    }

    /**
     * Gets remotePendingCommitFeeSat
     *
     * @return string
     */
    public function getRemotePendingCommitFeeSat()
    {
        return $this->container['remotePendingCommitFeeSat'];
    }

    /**
     * Sets remotePendingCommitFeeSat
     *
     * @param string $remotePendingCommitFeeSat The amount in satoshis calculated to be paid in fees for the remote pending commitment.
     *
     * @return $this
     */
    public function setRemotePendingCommitFeeSat($remotePendingCommitFeeSat)
    {
        $this->container['remotePendingCommitFeeSat'] = $remotePendingCommitFeeSat;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


