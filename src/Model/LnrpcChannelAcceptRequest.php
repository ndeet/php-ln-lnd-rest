<?php
/**
 * LnrpcChannelAcceptRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lnd\Rest\Model;

use \ArrayAccess;
use \Lnd\Rest\ObjectSerializer;

/**
 * LnrpcChannelAcceptRequest Class Doc Comment
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LnrpcChannelAcceptRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lnrpcChannelAcceptRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'nodePubkey' => 'string',
        'chainHash' => 'string',
        'pendingChanId' => 'string',
        'fundingAmt' => 'string',
        'pushAmt' => 'string',
        'dustLimit' => 'string',
        'maxValueInFlight' => 'string',
        'channelReserve' => 'string',
        'minHtlc' => 'string',
        'feePerKw' => 'string',
        'csvDelay' => 'int',
        'maxAcceptedHtlcs' => 'int',
        'channelFlags' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'nodePubkey' => 'byte',
        'chainHash' => 'byte',
        'pendingChanId' => 'byte',
        'fundingAmt' => 'uint64',
        'pushAmt' => 'uint64',
        'dustLimit' => 'uint64',
        'maxValueInFlight' => 'uint64',
        'channelReserve' => 'uint64',
        'minHtlc' => 'uint64',
        'feePerKw' => 'uint64',
        'csvDelay' => 'int64',
        'maxAcceptedHtlcs' => 'int64',
        'channelFlags' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nodePubkey' => 'node_pubkey',
        'chainHash' => 'chain_hash',
        'pendingChanId' => 'pending_chan_id',
        'fundingAmt' => 'funding_amt',
        'pushAmt' => 'push_amt',
        'dustLimit' => 'dust_limit',
        'maxValueInFlight' => 'max_value_in_flight',
        'channelReserve' => 'channel_reserve',
        'minHtlc' => 'min_htlc',
        'feePerKw' => 'fee_per_kw',
        'csvDelay' => 'csv_delay',
        'maxAcceptedHtlcs' => 'max_accepted_htlcs',
        'channelFlags' => 'channel_flags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nodePubkey' => 'setNodePubkey',
        'chainHash' => 'setChainHash',
        'pendingChanId' => 'setPendingChanId',
        'fundingAmt' => 'setFundingAmt',
        'pushAmt' => 'setPushAmt',
        'dustLimit' => 'setDustLimit',
        'maxValueInFlight' => 'setMaxValueInFlight',
        'channelReserve' => 'setChannelReserve',
        'minHtlc' => 'setMinHtlc',
        'feePerKw' => 'setFeePerKw',
        'csvDelay' => 'setCsvDelay',
        'maxAcceptedHtlcs' => 'setMaxAcceptedHtlcs',
        'channelFlags' => 'setChannelFlags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nodePubkey' => 'getNodePubkey',
        'chainHash' => 'getChainHash',
        'pendingChanId' => 'getPendingChanId',
        'fundingAmt' => 'getFundingAmt',
        'pushAmt' => 'getPushAmt',
        'dustLimit' => 'getDustLimit',
        'maxValueInFlight' => 'getMaxValueInFlight',
        'channelReserve' => 'getChannelReserve',
        'minHtlc' => 'getMinHtlc',
        'feePerKw' => 'getFeePerKw',
        'csvDelay' => 'getCsvDelay',
        'maxAcceptedHtlcs' => 'getMaxAcceptedHtlcs',
        'channelFlags' => 'getChannelFlags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nodePubkey'] = isset($data['nodePubkey']) ? $data['nodePubkey'] : null;
        $this->container['chainHash'] = isset($data['chainHash']) ? $data['chainHash'] : null;
        $this->container['pendingChanId'] = isset($data['pendingChanId']) ? $data['pendingChanId'] : null;
        $this->container['fundingAmt'] = isset($data['fundingAmt']) ? $data['fundingAmt'] : null;
        $this->container['pushAmt'] = isset($data['pushAmt']) ? $data['pushAmt'] : null;
        $this->container['dustLimit'] = isset($data['dustLimit']) ? $data['dustLimit'] : null;
        $this->container['maxValueInFlight'] = isset($data['maxValueInFlight']) ? $data['maxValueInFlight'] : null;
        $this->container['channelReserve'] = isset($data['channelReserve']) ? $data['channelReserve'] : null;
        $this->container['minHtlc'] = isset($data['minHtlc']) ? $data['minHtlc'] : null;
        $this->container['feePerKw'] = isset($data['feePerKw']) ? $data['feePerKw'] : null;
        $this->container['csvDelay'] = isset($data['csvDelay']) ? $data['csvDelay'] : null;
        $this->container['maxAcceptedHtlcs'] = isset($data['maxAcceptedHtlcs']) ? $data['maxAcceptedHtlcs'] : null;
        $this->container['channelFlags'] = isset($data['channelFlags']) ? $data['channelFlags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['nodePubkey']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['nodePubkey'])) {
            $invalidProperties[] = "invalid value for 'nodePubkey', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        if (!is_null($this->container['chainHash']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['chainHash'])) {
            $invalidProperties[] = "invalid value for 'chainHash', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        if (!is_null($this->container['pendingChanId']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['pendingChanId'])) {
            $invalidProperties[] = "invalid value for 'pendingChanId', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nodePubkey
     *
     * @return string
     */
    public function getNodePubkey()
    {
        return $this->container['nodePubkey'];
    }

    /**
     * Sets nodePubkey
     *
     * @param string $nodePubkey / The pubkey of the node that wishes to open an inbound channel.
     *
     * @return $this
     */
    public function setNodePubkey($nodePubkey)
    {

        if (!is_null($nodePubkey) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $nodePubkey))) {
            throw new \InvalidArgumentException("invalid value for $nodePubkey when calling LnrpcChannelAcceptRequest., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['nodePubkey'] = $nodePubkey;

        return $this;
    }

    /**
     * Gets chainHash
     *
     * @return string
     */
    public function getChainHash()
    {
        return $this->container['chainHash'];
    }

    /**
     * Sets chainHash
     *
     * @param string $chainHash / The hash of the genesis block that the proposed channel resides in.
     *
     * @return $this
     */
    public function setChainHash($chainHash)
    {

        if (!is_null($chainHash) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $chainHash))) {
            throw new \InvalidArgumentException("invalid value for $chainHash when calling LnrpcChannelAcceptRequest., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['chainHash'] = $chainHash;

        return $this;
    }

    /**
     * Gets pendingChanId
     *
     * @return string
     */
    public function getPendingChanId()
    {
        return $this->container['pendingChanId'];
    }

    /**
     * Sets pendingChanId
     *
     * @param string $pendingChanId / The pending channel id.
     *
     * @return $this
     */
    public function setPendingChanId($pendingChanId)
    {

        if (!is_null($pendingChanId) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $pendingChanId))) {
            throw new \InvalidArgumentException("invalid value for $pendingChanId when calling LnrpcChannelAcceptRequest., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['pendingChanId'] = $pendingChanId;

        return $this;
    }

    /**
     * Gets fundingAmt
     *
     * @return string
     */
    public function getFundingAmt()
    {
        return $this->container['fundingAmt'];
    }

    /**
     * Sets fundingAmt
     *
     * @param string $fundingAmt / The funding amount in satoshis that initiator wishes to use in the channel.
     *
     * @return $this
     */
    public function setFundingAmt($fundingAmt)
    {
        $this->container['fundingAmt'] = $fundingAmt;

        return $this;
    }

    /**
     * Gets pushAmt
     *
     * @return string
     */
    public function getPushAmt()
    {
        return $this->container['pushAmt'];
    }

    /**
     * Sets pushAmt
     *
     * @param string $pushAmt / The push amount of the proposed channel in millisatoshis.
     *
     * @return $this
     */
    public function setPushAmt($pushAmt)
    {
        $this->container['pushAmt'] = $pushAmt;

        return $this;
    }

    /**
     * Gets dustLimit
     *
     * @return string
     */
    public function getDustLimit()
    {
        return $this->container['dustLimit'];
    }

    /**
     * Sets dustLimit
     *
     * @param string $dustLimit / The dust limit of the initiator's commitment tx.
     *
     * @return $this
     */
    public function setDustLimit($dustLimit)
    {
        $this->container['dustLimit'] = $dustLimit;

        return $this;
    }

    /**
     * Gets maxValueInFlight
     *
     * @return string
     */
    public function getMaxValueInFlight()
    {
        return $this->container['maxValueInFlight'];
    }

    /**
     * Sets maxValueInFlight
     *
     * @param string $maxValueInFlight / The maximum amount of coins in millisatoshis that can be pending in this channel.
     *
     * @return $this
     */
    public function setMaxValueInFlight($maxValueInFlight)
    {
        $this->container['maxValueInFlight'] = $maxValueInFlight;

        return $this;
    }

    /**
     * Gets channelReserve
     *
     * @return string
     */
    public function getChannelReserve()
    {
        return $this->container['channelReserve'];
    }

    /**
     * Sets channelReserve
     *
     * @param string $channelReserve / The minimum amount of satoshis the initiator requires us to have at all times.
     *
     * @return $this
     */
    public function setChannelReserve($channelReserve)
    {
        $this->container['channelReserve'] = $channelReserve;

        return $this;
    }

    /**
     * Gets minHtlc
     *
     * @return string
     */
    public function getMinHtlc()
    {
        return $this->container['minHtlc'];
    }

    /**
     * Sets minHtlc
     *
     * @param string $minHtlc / The smallest HTLC in millisatoshis that the initiator will accept.
     *
     * @return $this
     */
    public function setMinHtlc($minHtlc)
    {
        $this->container['minHtlc'] = $minHtlc;

        return $this;
    }

    /**
     * Gets feePerKw
     *
     * @return string
     */
    public function getFeePerKw()
    {
        return $this->container['feePerKw'];
    }

    /**
     * Sets feePerKw
     *
     * @param string $feePerKw / The initial fee rate that the initiator suggests for both commitment transactions.
     *
     * @return $this
     */
    public function setFeePerKw($feePerKw)
    {
        $this->container['feePerKw'] = $feePerKw;

        return $this;
    }

    /**
     * Gets csvDelay
     *
     * @return int
     */
    public function getCsvDelay()
    {
        return $this->container['csvDelay'];
    }

    /**
     * Sets csvDelay
     *
     * @param int $csvDelay * The number of blocks to use for the relative time lock in the pay-to-self output of both commitment transactions.
     *
     * @return $this
     */
    public function setCsvDelay($csvDelay)
    {
        $this->container['csvDelay'] = $csvDelay;

        return $this;
    }

    /**
     * Gets maxAcceptedHtlcs
     *
     * @return int
     */
    public function getMaxAcceptedHtlcs()
    {
        return $this->container['maxAcceptedHtlcs'];
    }

    /**
     * Sets maxAcceptedHtlcs
     *
     * @param int $maxAcceptedHtlcs / The total number of incoming HTLC's that the initiator will accept.
     *
     * @return $this
     */
    public function setMaxAcceptedHtlcs($maxAcceptedHtlcs)
    {
        $this->container['maxAcceptedHtlcs'] = $maxAcceptedHtlcs;

        return $this;
    }

    /**
     * Gets channelFlags
     *
     * @return int
     */
    public function getChannelFlags()
    {
        return $this->container['channelFlags'];
    }

    /**
     * Sets channelFlags
     *
     * @param int $channelFlags / A bit-field which the initiator uses to specify proposed channel behavior.
     *
     * @return $this
     */
    public function setChannelFlags($channelFlags)
    {
        $this->container['channelFlags'] = $channelFlags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


