<?php
/**
 * LnrpcChanPointShim
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lnd\Rest\Model;

use \ArrayAccess;
use \Lnd\Rest\ObjectSerializer;

/**
 * LnrpcChanPointShim Class Doc Comment
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LnrpcChanPointShim implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lnrpcChanPointShim';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amt' => 'string',
        'chanPoint' => '\Lnd\Rest\Model\LnrpcChannelPoint',
        'localKey' => '\Lnd\Rest\Model\LnrpcKeyDescriptor',
        'remoteKey' => 'string',
        'pendingChanId' => 'string',
        'thawHeight' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'amt' => 'int64',
        'chanPoint' => null,
        'localKey' => null,
        'remoteKey' => 'byte',
        'pendingChanId' => 'byte',
        'thawHeight' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amt' => 'amt',
        'chanPoint' => 'chan_point',
        'localKey' => 'local_key',
        'remoteKey' => 'remote_key',
        'pendingChanId' => 'pending_chan_id',
        'thawHeight' => 'thaw_height'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amt' => 'setAmt',
        'chanPoint' => 'setChanPoint',
        'localKey' => 'setLocalKey',
        'remoteKey' => 'setRemoteKey',
        'pendingChanId' => 'setPendingChanId',
        'thawHeight' => 'setThawHeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amt' => 'getAmt',
        'chanPoint' => 'getChanPoint',
        'localKey' => 'getLocalKey',
        'remoteKey' => 'getRemoteKey',
        'pendingChanId' => 'getPendingChanId',
        'thawHeight' => 'getThawHeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amt'] = isset($data['amt']) ? $data['amt'] : null;
        $this->container['chanPoint'] = isset($data['chanPoint']) ? $data['chanPoint'] : null;
        $this->container['localKey'] = isset($data['localKey']) ? $data['localKey'] : null;
        $this->container['remoteKey'] = isset($data['remoteKey']) ? $data['remoteKey'] : null;
        $this->container['pendingChanId'] = isset($data['pendingChanId']) ? $data['pendingChanId'] : null;
        $this->container['thawHeight'] = isset($data['thawHeight']) ? $data['thawHeight'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['remoteKey']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['remoteKey'])) {
            $invalidProperties[] = "invalid value for 'remoteKey', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        if (!is_null($this->container['pendingChanId']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['pendingChanId'])) {
            $invalidProperties[] = "invalid value for 'pendingChanId', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amt
     *
     * @return string
     */
    public function getAmt()
    {
        return $this->container['amt'];
    }

    /**
     * Sets amt
     *
     * @param string $amt The size of the pre-crafted output to be used as the channel point for this channel funding.
     *
     * @return $this
     */
    public function setAmt($amt)
    {
        $this->container['amt'] = $amt;

        return $this;
    }

    /**
     * Gets chanPoint
     *
     * @return \Lnd\Rest\Model\LnrpcChannelPoint
     */
    public function getChanPoint()
    {
        return $this->container['chanPoint'];
    }

    /**
     * Sets chanPoint
     *
     * @param \Lnd\Rest\Model\LnrpcChannelPoint $chanPoint The target channel point to refrence in created commitment transactions.
     *
     * @return $this
     */
    public function setChanPoint($chanPoint)
    {
        $this->container['chanPoint'] = $chanPoint;

        return $this;
    }

    /**
     * Gets localKey
     *
     * @return \Lnd\Rest\Model\LnrpcKeyDescriptor
     */
    public function getLocalKey()
    {
        return $this->container['localKey'];
    }

    /**
     * Sets localKey
     *
     * @param \Lnd\Rest\Model\LnrpcKeyDescriptor $localKey Our local key to use when creating the multi-sig output.
     *
     * @return $this
     */
    public function setLocalKey($localKey)
    {
        $this->container['localKey'] = $localKey;

        return $this;
    }

    /**
     * Gets remoteKey
     *
     * @return string
     */
    public function getRemoteKey()
    {
        return $this->container['remoteKey'];
    }

    /**
     * Sets remoteKey
     *
     * @param string $remoteKey The key of the remote party to use when creating the multi-sig output.
     *
     * @return $this
     */
    public function setRemoteKey($remoteKey)
    {

        if (!is_null($remoteKey) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $remoteKey))) {
            throw new \InvalidArgumentException("invalid value for $remoteKey when calling LnrpcChanPointShim., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['remoteKey'] = $remoteKey;

        return $this;
    }

    /**
     * Gets pendingChanId
     *
     * @return string
     */
    public function getPendingChanId()
    {
        return $this->container['pendingChanId'];
    }

    /**
     * Sets pendingChanId
     *
     * @param string $pendingChanId If non-zero, then this will be used as the pending channel ID on the wire protocol to initate the funding request. This is an optional field, and should only be set if the responder is already expecting a specific pending channel ID.
     *
     * @return $this
     */
    public function setPendingChanId($pendingChanId)
    {

        if (!is_null($pendingChanId) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $pendingChanId))) {
            throw new \InvalidArgumentException("invalid value for $pendingChanId when calling LnrpcChanPointShim., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['pendingChanId'] = $pendingChanId;

        return $this;
    }

    /**
     * Gets thawHeight
     *
     * @return int
     */
    public function getThawHeight()
    {
        return $this->container['thawHeight'];
    }

    /**
     * Sets thawHeight
     *
     * @param int $thawHeight This uint32 indicates if this channel is to be considered 'frozen'. A frozen channel does not allow a cooperative channel close by the initiator. The thaw_height is the height that this restriction stops applying to the channel. The height can be interpreted in two ways: as a relative height if the value is less than 500,000, or as an absolute height otherwise.
     *
     * @return $this
     */
    public function setThawHeight($thawHeight)
    {
        $this->container['thawHeight'] = $thawHeight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


