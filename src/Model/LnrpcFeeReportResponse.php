<?php
/**
 * LnrpcFeeReportResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * rpc.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lnd\Rest\Model;

use \ArrayAccess;
use \Lnd\Rest\ObjectSerializer;

/**
 * LnrpcFeeReportResponse Class Doc Comment
 *
 * @category Class
 * @package  Lnd\Rest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LnrpcFeeReportResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lnrpcFeeReportResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'channelFees' => '\Lnd\Rest\Model\LnrpcChannelFeeReport[]',
        'dayFeeSum' => 'string',
        'weekFeeSum' => 'string',
        'monthFeeSum' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'channelFees' => null,
        'dayFeeSum' => 'uint64',
        'weekFeeSum' => 'uint64',
        'monthFeeSum' => 'uint64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channelFees' => 'channel_fees',
        'dayFeeSum' => 'day_fee_sum',
        'weekFeeSum' => 'week_fee_sum',
        'monthFeeSum' => 'month_fee_sum'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channelFees' => 'setChannelFees',
        'dayFeeSum' => 'setDayFeeSum',
        'weekFeeSum' => 'setWeekFeeSum',
        'monthFeeSum' => 'setMonthFeeSum'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channelFees' => 'getChannelFees',
        'dayFeeSum' => 'getDayFeeSum',
        'weekFeeSum' => 'getWeekFeeSum',
        'monthFeeSum' => 'getMonthFeeSum'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channelFees'] = isset($data['channelFees']) ? $data['channelFees'] : null;
        $this->container['dayFeeSum'] = isset($data['dayFeeSum']) ? $data['dayFeeSum'] : null;
        $this->container['weekFeeSum'] = isset($data['weekFeeSum']) ? $data['weekFeeSum'] : null;
        $this->container['monthFeeSum'] = isset($data['monthFeeSum']) ? $data['monthFeeSum'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channelFees
     *
     * @return \Lnd\Rest\Model\LnrpcChannelFeeReport[]
     */
    public function getChannelFees()
    {
        return $this->container['channelFees'];
    }

    /**
     * Sets channelFees
     *
     * @param \Lnd\Rest\Model\LnrpcChannelFeeReport[] $channelFees An array of channel fee reports which describes the current fee schedule for each channel.
     *
     * @return $this
     */
    public function setChannelFees($channelFees)
    {
        $this->container['channelFees'] = $channelFees;

        return $this;
    }

    /**
     * Gets dayFeeSum
     *
     * @return string
     */
    public function getDayFeeSum()
    {
        return $this->container['dayFeeSum'];
    }

    /**
     * Sets dayFeeSum
     *
     * @param string $dayFeeSum The total amount of fee revenue (in satoshis) the switch has collected over the past 24 hrs.
     *
     * @return $this
     */
    public function setDayFeeSum($dayFeeSum)
    {
        $this->container['dayFeeSum'] = $dayFeeSum;

        return $this;
    }

    /**
     * Gets weekFeeSum
     *
     * @return string
     */
    public function getWeekFeeSum()
    {
        return $this->container['weekFeeSum'];
    }

    /**
     * Sets weekFeeSum
     *
     * @param string $weekFeeSum The total amount of fee revenue (in satoshis) the switch has collected over the past 1 week.
     *
     * @return $this
     */
    public function setWeekFeeSum($weekFeeSum)
    {
        $this->container['weekFeeSum'] = $weekFeeSum;

        return $this;
    }

    /**
     * Gets monthFeeSum
     *
     * @return string
     */
    public function getMonthFeeSum()
    {
        return $this->container['monthFeeSum'];
    }

    /**
     * Sets monthFeeSum
     *
     * @param string $monthFeeSum The total amount of fee revenue (in satoshis) the switch has collected over the past 1 month.
     *
     * @return $this
     */
    public function setMonthFeeSum($monthFeeSum)
    {
        $this->container['monthFeeSum'] = $monthFeeSum;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


